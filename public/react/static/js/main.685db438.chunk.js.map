{"version":3,"sources":["EditDevWindow/index.js","serviceWorker.js","index.js","EditDevWindow/style.module.css"],"names":["EditDevWindow","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleShow","bind","assertThisInitialized","handleClose","state","show","devId","setState","react_default","a","createElement","className","Modal","onHide","bsSize","ModalHeader","closeButton","Title","ModalBody","custCss","modalBody","ModalFooter","Button","onClick","_this2","window","openEditModal","id","Component","Boolean","location","hostname","match","ReactDOM","render","src_EditDevWindow","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"4PAwFeA,cAjFX,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACxBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KAERQ,WAAaP,EAAKO,WAAWC,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAClBA,EAAKU,YAAcV,EAAKU,YAAYF,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAEnBA,EAAKW,MAAQ,CACTC,MAAM,EACNC,MAAO,MARab,6EAaxBG,KAAKW,SAAS,CAAEF,MAAM,yCAItBT,KAAKW,SAAS,CAAEF,MAAM,qCAItB,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOP,KAAMT,KAAKQ,MAAMC,KAAMQ,OAAQjB,KAAKO,YAAaW,OAAO,SAC3DN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAaC,aAAW,GACpBR,EAAAC,EAAAC,cAACE,EAAA,EAAMK,MAAP,kCAAwCrB,KAAKQ,MAAME,MAAnD,MAEJE,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAWP,UAAWQ,IAAQC,WAC1BZ,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,6EAIAF,EAAAC,EAAAC,cAAA,iCAEAF,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,sDACAF,EAAAC,EAAAC,cAAA,yLAKAF,EAAAC,EAAAC,cAAA,uJAKDF,EAAAC,EAAAC,cAAA,uJAKAF,EAAAC,EAAAC,cAAA,uJAKAF,EAAAC,EAAAC,cAAA,wJAMHF,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACIb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAQC,QAAS3B,KAAKO,aAAtB,wDAMA,IAAAqB,EAAA5B,KAChB6B,OAAOC,cAAgB,SAACC,GACpBH,EAAKjB,SAAS,CACVF,MAAM,EACNC,MAAOqB,YA5EKC,aCMRC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAAmBC,SAASC,eAAe,gBD0HrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCElInBC,EAAAC,QAAA,CAAkBzB,UAAA","file":"static/js/main.685db438.chunk.js","sourcesContent":["import React, {Component} from 'react'\n// import './App.css'\n// import './style.module.css'\nimport custCss from './style.module.css'\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from 'react-bootstrap'\n\nclass EditDevWindow extends Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            show: false,\n            devId: null\n        };\n    }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    handleShow() {\n        this.setState({ show: true });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Modal show={this.state.show} onHide={this.handleClose} bsSize=\"large\" >\n                    <ModalHeader closeButton>\n                        <Modal.Title>Modal heading. Device ID: {this.state.devId} </Modal.Title>\n                    </ModalHeader>\n                    <ModalBody className={custCss.modalBody} >\n                        <h4>Text in a modal</h4>\n                        <p>\n                            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n                        </p>\n\n                        <h4>Tooltips in a modal</h4>\n\n                        <hr/>\n\n                        <h4>Overflowing text to show scroll behavior</h4>\n                        <p>\n                            Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\n                            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta\n                            ac consectetur ac, vestibulum at eros.\n                        </p>\n                        <p>\n                            Praesent commodo cursus magna, vel scelerisque nisl consectetur\n                            et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\n                            auctor.\n                        </p>\n                       <p>\n                            Praesent commodo cursus magna, vel scelerisque nisl consectetur\n                            et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\n                            auctor.\n                        </p>\n                       <p>\n                            Praesent commodo cursus magna, vel scelerisque nisl consectetur\n                            et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\n                            auctor.\n                        </p>\n                       <p>\n                            Praesent commodo cursus magna, vel scelerisque nisl consectetur\n                            et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor\n                            auctor.\n                        </p>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={this.handleClose}>Close</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        )\n    }\n    componentDidMount() {\n        window.openEditModal = (id) => {\n            this.setState({\n                show: true,\n                devId: id\n            })\n        }\n    }\n}\n\nexport default EditDevWindow\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport EditDevWindow from './EditDevWindow';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<EditDevWindow />, document.getElementById('injectReact'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBody\":\"style_modalBody__2dIVL\"};"],"sourceRoot":""}