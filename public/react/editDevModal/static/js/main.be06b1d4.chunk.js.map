{"version":3,"sources":["EditDevWindow/style.module.css","components/Base/Input/style.module.css","components/Base/Select/index.js","components/Base/RemoteDataProvider/index.js","constants.js","components/Office/index.js","components/Region/index.js","components/City/index.js","components/DevType/index.js","components/Platform/index.js","components/Software/index.js","components/Base/Input/index.js","components/Base/Input2/index.js","components/Base/TextArea/index.js","components/Base/TextArea2/index.js","components/Base/CheckBox/index.js","components/Base/EditableTag/index.js","components/InUseButton/index.js","components/Modules/index.js","components/IpAddressEdit/index.js","components/Ports/index.js","components/DevLocation/index.js","EditDevWindow/index.js","serviceWorker.js","index.js","components/IpAddressEdit/style.module.css","components/Base/Select/style.module.css","components/Base/Input2/style.module.css"],"names":["module","exports","modalBody","formGroupZeroMargin","Select","prevValue","prevFilter","prevState","state","value","isLoading","optionsInvalidate","optionList","setDefaultSelected","undefined","_this","filter","item","length","setState","handleChange","e","console","log","target","parseInt","isNaN","toString","defaultSelectedValue","checkSelected","props","disabled","checkFilter","isEqual","invokeListeners","JSON","stringify","onChange","check","function","not","array","cloneDeep","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","subscriber","err","return","buildOptionList","react_default","a","createElement","emptyOption","emptyValue","key","emptyLabel","optionsSet","map","_ref","label","concat","Object","toConsumableArray","this","isAsync","updateRemoteOptionList","updateLocalOptionList","remoteDataFetch","remoteDataFetchDefault","data","_context2","t0","remoteSourceUrl","axios","post","_context3","clearMargin","css","controlLabel","string","ControlLabel","react","FormGroup","controlId","style","bsClass","FormControl","componentClass","placeholder","className","smallSize","size","updateIfNeeded","defaultSelected","PureComponent","defaultProps","selected","RemoteDataProvider","url","asyncToGenerator","regenerator_default","mark","_callee","_ref2","wrap","_context","prev","sent","abrupt","emptyString","stop","_x","apply","arguments","BASE_URL","protocol","window","location","hostname","port","DEV_DATA_URL","DEV_MODULES_DATA_URL","DEV_PORTS_DATA_URL","DEV_LOCATION_URL","VRF_LIST_URL","DEV_SUBMIT_URL","REGIONS_URL","CITIES_URL","OFFICES_URL","DEV_TYPES","PLATFORMS","SOFTWARE_LIST","Office","optionListUpdater","Base_Select","assign","Region","City","DevType","Platform","updateOptionList","Software","Input","setDefaultValue","nonEmptyString","custCss","_this$props","addOnPosition","addOnText","formControl","type","readOnly","leftAddOn","InputGroup","Addon","rightAddOn","defaultValue","Input2","customSize","TextArea","TextArea2","CheckBox","checked","handleOnChange","Checkbox","title","children","EditableTag","ref","React","createRef","formatValue","stateless","eventValue","currentState","html","react_contenteditable_default","innerRef","tagName","wordWrap","InUseButton","handleOnClick","Button","bsStyle","bsSize","onClick","Modules","modulesSet","index","button","components_InUseButton","module_item_in_use","module_item_not_found","module_item_sn","Base_EditableTag","module_item_comment","align","valign","Table","responsive","bordered","striped","condensed","tableLayout","IpAddressEdit","ip","mask","setDefaultIp","setDefaultMask","integer","handleChangeIp","handleChangeMask","formControlIp","onChangeIp","formControlMask","onChangeMask","Ports","prevVrfData","prevList","ports","ipEditMode","setDefaultState","newState","objectSpread","port_mask_len","ipFormat","RegExp","test","numericFormat","macAddressFormat","handlerOnChangeCheckbox","idx","port_is_mng","newPorts","port_ip","onChangePortName","port_details","portName","onChangePortMac","port_mac","onChangePortDescription","description","onChangeVrf","_this$props$vrfData$f","vrfData","vrf_id","vrf","slicedToArray","port_vrf_id","port_vrf_name","vrf_name","vrfList","vrfName","vrfId","_vrfData$filter","newPort","port_id","port_comment","deleted","onClickAddPort","updatedPorts","push","onClickDelPort","portsSet","createdPorts","existedPorts","defaultVrf","forEach","ipCell","components_IpAddressEdit","Base_Input2","marginTop","marginBottom","reverse","Row","Col","md","DevLocation","floor","row","rack","unit","rackSide","EditDevWindow","show","devId","devDataLoading","devDataReady","mngPorts","mngIp","officeComment","loadingOfficeData","officeDataInvalidate","saving","region_id","city_id","initialData","geoLocation","devInfo","modules","cityFilter","accessor","statement","officeFilter","siteInfo","getDevLocation","location_id","res","get","params","managingIp","portsInfo","join","handleShow","handleClose","dataValidate","devData","errors","number","office_id","handleSubmit","_callee2","nonEmptyArray","alert","result","updateDevTable","setTimeout","onChangeGeoLocation","_ref4","_callee3","_ref3","_res$location","office_comment","defineProperty","onChangeDevInfo","_x2","onChangeOfficeComment","_ref5","onChangeDevDetails","_ref6","dev_details","onChangeModule","_ref7","changeMngIpString","onChangePorts","_ref8","onChangeDevLocation","_ref9","site","fetchDeviceData","_callee4","id","_context4","fetchDevModulesData","_callee5","_context5","fetchDevPortsData","_callee6","_context6","fetchVrfList","_callee7","_context7","memoizedCityFilter","newCityFilter","memoizedOfficeFilter","newFilter","_this$initialData","devSite","_ref14","Modal","onHide","ModalHeader","closeButton","Title","ModalBody","components_Region","components_City","components_Office","Base_TextArea2","components_DevType","dev_type_id","components_Platform","platform_id","components_Software","software_id","Base_Input","software_item_ver","platform_item_sn","platform_item_sn_alt","Base_TextArea","dev_comment","Base_CheckBox","dev_in_use","components_Modules","components_Ports","components_DevLocation","ModalFooter","margin","openEditModal","_this2","Promise","all","response1","response2","_ref15","_context9","Component","Boolean","match","ReactDOM","render","src_EditDevWindow","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","indents"],"mappings":"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","file":"static/js/main.be06b1d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBody\":\"style_modalBody__2dIVL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroupZeroMargin\":\"style_formGroupZeroMargin__2exhN\"};","import React, { PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {FormControl, ControlLabel, FormGroup} from 'react-bootstrap'\r\nimport check from 'check-types'\r\nimport axios from \"axios\"\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport isEqual from 'lodash/isEqual'\r\nimport css from \"./style.module.css\"\r\n\r\nclass Select extends PureComponent {\r\n\r\n    state = {\r\n        value: '',\r\n        isLoading: false,\r\n        optionsInvalidate: true,\r\n    }\r\n    optionList = []\r\n\r\n    setDefaultSelected = ((prevValue) => (value) => {\r\n        if (value === undefined || value === null || this.state.optionsInvalidate || this.state.isLoading) return\r\n        if (prevValue === value) return\r\n        prevValue = value\r\n        if (this.optionList.filter((item) => item.value === value).length === 0) return\r\n        if (this.state.value === value) return\r\n        this.setState({value: prevValue})\r\n    })('')\r\n\r\n    handleChange = (e) => {\r\n        console.log('type', typeof e.target.value)\r\n        let value = parseInt(e.target.value)\r\n        if (!isNaN(value) && value.toString && value.toString() === e.target.value) {\r\n            this.setState({value})\r\n        }  else {\r\n            this.setState({value: e.target.value})\r\n        }\r\n    }\r\n    defaultSelectedValue = () => {\r\n        return this.optionList.length === 1 ? this.optionList[0].value : ''\r\n    }\r\n\r\n    checkSelected = () => {\r\n        if (this.state.isLoading || this.props.disabled) return\r\n        if (this.optionList.filter((item) => item.value === this.state.value).length === 0) this.setState({value: this.defaultSelectedValue()})\r\n    }\r\n    checkFilter = ((prevFilter) => () => {\r\n        const {filter} = this.props\r\n        if (isEqual(prevFilter, filter)) return\r\n        prevFilter = filter\r\n        return this.setState({optionsInvalidate: true})\r\n    })(this.props.filter)\r\n\r\n\r\n    invokeListeners = ((prevState) => () => {\r\n        if (JSON.stringify(this.state) === JSON.stringify(prevState)) return\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        prevState = cloneDeep(this.state)\r\n        for (const subscriber of onChange) {\r\n            subscriber(prevState)\r\n        }\r\n    })([])\r\n\r\n    async updateIfNeeded() {\r\n\r\n        const {isAsync, disabled} = this.props\r\n        const {isLoading, optionsInvalidate} = this.state\r\n\r\n        if (isLoading || disabled) return\r\n        this.checkFilter()\r\n        if (!optionsInvalidate) return\r\n        if (isAsync) {\r\n            this.setState({isLoading: true})\r\n            this.optionList = await this.updateRemoteOptionList()\r\n        } else {\r\n            this.optionList = this.updateLocalOptionList()\r\n        }\r\n        this.setState({isLoading: false, optionsInvalidate: false})\r\n    }\r\n\r\n    async updateRemoteOptionList() {\r\n        const {remoteDataFetch = this.remoteDataFetchDefault} = this.props\r\n        try {\r\n            const data = await remoteDataFetch(this.props.filter)\r\n            return check.array(data) ? data : []\r\n        } catch (error) {\r\n            console.log('error in Select: ', error)\r\n        }\r\n\r\n\r\n    }\r\n    updateLocalOptionList() {\r\n        return this.props.optionList\r\n    }\r\n\r\n    async remoteDataFetchDefault() {\r\n        const {remoteSourceUrl, filter=[]} = this.props\r\n        try {\r\n            const {data} = await axios.post(remoteSourceUrl, filter)\r\n            return check.array(data) ? data : []\r\n        } catch (error) {\r\n            console.log('error: ', error)\r\n        }\r\n    }\r\n\r\n    buildOptionList = () => {\r\n        const {isLoading} = this.state\r\n        if (isLoading) return <option value={null}>Loading...</option>\r\n\r\n        const emptyOption = <option value={this.props.emptyValue} key='empty'>{this.props.emptyLabel}</option>\r\n        const optionsSet = this.optionList.map(\r\n            ({value, label}, key) => {\r\n                return <option value={value} key={key}>{label}</option>\r\n            })\r\n        if (this.optionList.length === 1) {\r\n            return optionsSet\r\n        } else {\r\n            return this.props.emptyOption ? [emptyOption, ...optionsSet] : optionsSet\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const clearMargin = this.props.clearMargin ? css.formGroupZeroMargin : undefined\r\n        const {value} = this.state\r\n        const controlLabel = check.string(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        return (\r\n            <Fragment>\r\n                <FormGroup controlId={this.props.controlId} style={this.props.style} bsClass={clearMargin}>\r\n                    {controlLabel}\r\n                    <FormControl\r\n                        onChange={this.handleChange}\r\n                        componentClass=\"select\"\r\n                        placeholder=\"select item\"\r\n                        value={value}\r\n                        disabled={this.props.disabled}\r\n                        className={this.props.smallSize ? css.size : undefined}\r\n                    >\r\n                        {this.buildOptionList()}\r\n                    </FormControl>\r\n                </FormGroup>\r\n            </Fragment>\r\n        );\r\n    }\r\n    async componentDidMount() {\r\n        await this.updateIfNeeded()\r\n        this.setDefaultSelected(this.props.defaultSelected)\r\n        this.checkSelected()\r\n    }\r\n    async componentDidUpdate() {\r\n        await this.updateIfNeeded()\r\n        this.setDefaultSelected(this.props.defaultSelected)\r\n        this.checkSelected()\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * isAsync - if true, will be used  getDataUrl to get options list. optionList parameter will be ignored\r\n * onChange - function or array of functions, that will be invoke on state change\r\n */\r\nSelect.propTypes = {\r\n    controlId: PropTypes.string,\r\n    //local option list if isAsync = false\r\n    optionList: PropTypes.arrayOf(PropTypes.shape(\r\n        {\r\n            value: PropTypes.oneOfType([\r\n                PropTypes.number,\r\n                PropTypes.string\r\n            ]),\r\n            label: PropTypes.string\r\n        }\r\n    )),\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    emptyOption: PropTypes.bool, //add or not empty option into list\r\n    emptyValue: PropTypes.string,\r\n    emptyLabel: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    isAsync: PropTypes.bool,\r\n    remoteSourceUrl: PropTypes.string,\r\n    remoteDataFetch: PropTypes.func,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    })),\r\n    style: PropTypes.object,\r\n    clearMargin: PropTypes.bool,\r\n    smallSize: PropTypes.bool\r\n}\r\nSelect.defaultProps = {\r\n    emptyOption: true,\r\n    optionList: [],\r\n    isAsync: false,\r\n    onChange: [],\r\n    emptyValue: '',\r\n    emptyLabel: '<Не выбрано>',\r\n    filter: [],\r\n    selected: ''\r\n}\r\n\r\nexport default Select\r\n","import axios from 'axios'\r\nimport check from 'check-types'\r\n\r\nconst RemoteDataProvider = (url, key) => async function (filter) {\r\n    try {\r\n        const {data} = await axios.post(url, filter)\r\n        return data[key].filter(item => {\r\n            return check.not.emptyString(item.value)\r\n        })\r\n    } catch (error) {\r\n        console.log('error: ', error)\r\n        return [{\r\n            value: 'fetchDataError',\r\n            label: 'Ошибка запроса данных'\r\n        }]\r\n    }\r\n}\r\n\r\nexport default RemoteDataProvider","const DEVELOPED_BASE_URL = 'netcmdb-loc.rs.ru:8082'\r\nconst BASE_URL = (() => {\r\n    const protocol = window.location.protocol\r\n    const hostname = window.location.hostname\r\n    const port = window.location.port\r\n    const developMode = hostname === 'localhost'\r\n    return developMode ? `${protocol}//${DEVELOPED_BASE_URL}` : `${protocol}//${hostname}${port==='' ? '' : ':'}${port}`\r\n})()\r\nexport const DEV_DATA_URL = `${BASE_URL}/api/getDevData.json`\r\nexport const DEV_MODULES_DATA_URL = `${BASE_URL}/api/getDevModulesData.json`\r\nexport const DEV_PORTS_DATA_URL = `${BASE_URL}/api/getDevPortsData.json`\r\nexport const DEV_LOCATION_URL = `${BASE_URL}/api/getDevLocation.json`\r\nexport const VRF_LIST_URL= `${BASE_URL}/api/getVrfList.json`\r\nexport const DEV_SUBMIT_URL = `${BASE_URL}/api/saveDev.json`\r\nexport const REGIONS_URL = `${BASE_URL}/api/getRegions.json`\r\nexport const CITIES_URL = `${BASE_URL}/api/getCities.json`\r\nexport const OFFICES_URL = `${BASE_URL}/api/getOffices.json`\r\nexport const DEV_TYPES = `${BASE_URL}/api/getDevTypes.json`\r\nexport const PLATFORMS = `${BASE_URL}/api/getPlatforms.json`\r\nexport const SOFTWARE_LIST = `${BASE_URL}/api/getSoftwareList.json`\r\nconsole.log(\"BASE API URL\", BASE_URL)","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {OFFICES_URL} from '../../constants'\r\n\r\nclass Office extends PureComponent {\r\n\r\n    optionListUpdater = RemoteDataProvider(OFFICES_URL, 'offices')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.optionListUpdater} />\r\n    }\r\n}\r\n\r\n\r\nOffice.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nOffice.defaultProps = {\r\n    label: 'Офис',\r\n    controlId: 'officeSelector',\r\n}\r\n\r\nexport default Office\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import check from 'check-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {REGIONS_URL} from '../../constants'\r\n\r\nclass Region extends PureComponent {\r\n\r\n    optionListUpdater = RemoteDataProvider(REGIONS_URL, 'regions')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.optionListUpdater} />\r\n    }\r\n}\r\n\r\nRegion.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nRegion.defaultProps = {\r\n    label: 'Регион',\r\n    controlId: 'regionSelector',\r\n}\r\nexport default Region\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {CITIES_URL} from '../../constants'\r\n\r\n\r\nclass City extends PureComponent {\r\n\r\n    optionListUpdater = RemoteDataProvider(CITIES_URL, 'cities')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.optionListUpdater} />\r\n    }\r\n}\r\n\r\n\r\nCity.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nCity.defaultProps = {\r\n    label: 'Город',\r\n    controlId: 'citySelector',\r\n    // filter: {\r\n    //     accessor: 'region_id',\r\n    //     statement: '',\r\n    //     value: ''\r\n    // }\r\n}\r\n\r\nexport default City\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {DEV_TYPES} from '../../constants'\r\n\r\nclass DevType extends PureComponent {\r\n\r\n    optionListUpdater = RemoteDataProvider(DEV_TYPES, 'devTypes')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.optionListUpdater} />\r\n    }\r\n}\r\n\r\n\r\nDevType.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nDevType.defaultProps = {\r\n    label: 'Тип(роль)',\r\n    controlId: 'devTypeSelector',\r\n}\r\n\r\nexport default DevType\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {PLATFORMS} from '../../constants'\r\n\r\nclass Platform extends PureComponent {\r\n\r\n    updateOptionList = RemoteDataProvider(PLATFORMS, 'platforms')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.updateOptionList} />\r\n    }\r\n}\r\n\r\n\r\nPlatform.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nPlatform.defaultProps = {\r\n    label: 'Платформа',\r\n    controlId: 'platformSelector',\r\n}\r\n\r\nexport default Platform\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {SOFTWARE_LIST} from '../../constants'\r\n\r\nclass Software extends PureComponent {\r\n\r\n    optionListUpdater = RemoteDataProvider(SOFTWARE_LIST, 'softwareList')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.optionListUpdater} />\r\n    }\r\n}\r\n\r\n\r\nSoftware.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nSoftware.defaultProps = {\r\n    label: 'ПО',\r\n    controlId: 'softwareSelector',\r\n}\r\n\r\nexport default Software\r\n","import React, {PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport custCss from './style.module.css'\r\nimport {FormGroup, FormControl, ControlLabel, InputGroup} from 'react-bootstrap'\r\n\r\nclass Input extends PureComponent {\r\n    state = {\r\n        value: ''\r\n    }\r\n\r\n    setDefaultValue = ((prevValue) => (value) => {\r\n        if (check.nonEmptyString(value) && prevValue !== value) {\r\n            prevValue = value\r\n            this.setState({value})\r\n        }\r\n    })('')\r\n\r\n    handleChange = (e) => {\r\n        this.setState({value: e.target.value})\r\n    }\r\n\r\n    invokeListeners = () => {\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const clearMargin = this.props.clearMargin ? custCss.formGroupZeroMargin : undefined\r\n        const {addOnPosition, addOnText} = this.props\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        const formControl = <FormControl\r\n            type=\"text\"\r\n            value={this.state.value}\r\n            placeholder={this.props.placeholder}\r\n            onChange={this.handleChange}\r\n            readOnly={this.props.readOnly}\r\n            disabled={this.props.disabled}\r\n            style={this.props.style}\r\n        />\r\n        if (addOnPosition && check.nonEmptyString(addOnText)) {\r\n            const leftAddOn = this.props.addOnPosition && this.props.addOnPosition === 'left' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            const rightAddOn = this.props.addOnPosition && this.props.addOnPosition === 'right' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        <InputGroup>\r\n                            {leftAddOn}\r\n                            {formControl}\r\n                            {rightAddOn}\r\n                        </InputGroup>\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        } else {\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        {formControl}\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nInput.propTypes = {\r\n    label: PropTypes.string,\r\n    controlId: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    defaultValue: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    addOnPosition: PropTypes.oneOf(['left', 'right']),\r\n    addOnText: PropTypes.string,\r\n    clearMargin: PropTypes.bool\r\n}\r\nInput.defaultProps = {\r\n    label: '',\r\n    disabled: false,\r\n}\r\nexport default Input\r\n\r\n","import React, {PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport css from './style.module.css'\r\nimport {FormGroup, FormControl, ControlLabel, InputGroup} from 'react-bootstrap'\r\n\r\nclass Input2 extends PureComponent {\r\n\r\n    render() {\r\n        const clearMargin = this.props.clearMargin ? css.formGroupZeroMargin : undefined\r\n        const {addOnPosition, addOnText} = this.props\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        const formControl = <FormControl\r\n            type=\"text\"\r\n            value={this.props.value}\r\n            placeholder={this.props.placeholder}\r\n            onChange={this.props.onChange}\r\n            readOnly={this.props.readOnly}\r\n            disabled={this.props.disabled}\r\n            className={this.props.customSize ? css.size : undefined}\r\n        />\r\n        if (addOnPosition && check.nonEmptyString(addOnText)) {\r\n            const leftAddOn = this.props.addOnPosition && this.props.addOnPosition === 'left' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            const rightAddOn = this.props.addOnPosition && this.props.addOnPosition === 'right' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        <InputGroup>\r\n                            {leftAddOn}\r\n                            {formControl}\r\n                            {rightAddOn}\r\n                        </InputGroup>\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        } else {\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        {formControl}\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n    componentDidUpdate() {\r\n    }\r\n}\r\n\r\nInput2.propTypes = {\r\n    customSize: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    controlId: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    value: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    addOnPosition: PropTypes.oneOf(['left', 'right']),\r\n    addOnText: PropTypes.string,\r\n    clearMargin: PropTypes.bool\r\n}\r\nInput2.defaultProps = {\r\n    disabled: false,\r\n    clearMargin: true\r\n}\r\nexport default Input2\r\n\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport {FormControl, FormGroup, ControlLabel} from 'react-bootstrap'\r\n\r\nclass TextArea extends PureComponent {\r\n    state = {\r\n        value: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({value: e.target.value})\r\n    }\r\n    invokeListeners = () => {\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    }\r\n    setDefaultValue = ((prevValue) => (value) => {\r\n        if (value === undefined || value === null) return\r\n        if (prevValue === value) return\r\n        prevValue = value\r\n        this.setState({value})\r\n        // if (check.nonEmptyString(value) && prevValue !== value) {\r\n        //     prevValue = value\r\n        //     this.setState({value})\r\n        // }\r\n    })('')\r\n\r\n    render() {\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        return (\r\n            <FormGroup controlId=\"formControlsTextarea\">\r\n                {controlLabel}\r\n                <FormControl componentClass=\"textarea\" placeholder={this.props.placeholder} onChange={this.handleChange} value={this.state.value} />\r\n            </FormGroup>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nTextArea.propTypes = {\r\n    label: PropTypes.string,\r\n    defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    controlId: PropTypes.string,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string\r\n}\r\nTextArea.defaultProps = {\r\n}\r\n\r\nexport default TextArea","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport {FormControl, FormGroup, ControlLabel} from 'react-bootstrap'\r\n\r\nclass TextArea2 extends PureComponent {\r\n\r\n    render() {\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        return (\r\n            <FormGroup controlId=\"formControlsTextarea\">\r\n                {controlLabel}\r\n                <FormControl componentClass=\"textarea\" placeholder={this.props.placeholder} onChange={this.props.onChange} value={this.props.value} disabled={this.props.disabled} />\r\n            </FormGroup>\r\n        )\r\n    }\r\n    componentDidMount() {}\r\n    componentDidUpdate() {}\r\n}\r\n\r\nTextArea2.propTypes = {\r\n    label: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    controlId: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string\r\n}\r\nTextArea2.defaultProps = {\r\n}\r\n\r\nexport default TextArea2","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from \"check-types\"\r\nimport {Checkbox} from \"react-bootstrap\"\r\n\r\nclass CheckBox extends PureComponent {\r\n    state = {\r\n        value: this.props.checked\r\n    }\r\n\r\n    handleOnChange = () => {\r\n        this.setState({value: !this.state.value})\r\n    }\r\n\r\n\r\n    setDefaultValue = ((prevState) => (value) => {\r\n        if (prevState !== value) {\r\n            prevState = value\r\n            this.setState({value})\r\n        }\r\n    })(this.props.checked)\r\n\r\n    invokeListeners = () => {\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Checkbox title={this.props.title} onChange={this.handleOnChange} checked={this.state.value} disabled={this.props.disabled} style={this.props.style} >{this.props.children}</Checkbox>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.checked)\r\n        this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.checked)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nCheckBox.propTypes = {\r\n    checked: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    style: PropTypes.object,\r\n}\r\nCheckBox.defaultProps = {\r\n    disabled: false,\r\n    checked: false\r\n}\r\n\r\nexport default CheckBox\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from \"check-types\"\r\nimport ContentEditable from \"react-contenteditable\"\r\n\r\nclass EditableTag extends PureComponent {\r\n\r\n    state = {\r\n        value: ''\r\n    }\r\n\r\n    ref = React.createRef()\r\n\r\n    formatValue = this.props.formatValue ? this.props.formatValue : (value) => value\r\n\r\n    handleOnChange = (e) => {\r\n        if (this.state.value === e.target.value) return\r\n        if (this.props.stateless) {\r\n            this.invokeListeners({value: this.formatValue(e.target.value)})\r\n        } else {\r\n            this.setState({value: e.target.value})\r\n        }\r\n    }\r\n\r\n    setDefaultValue = ((prevValue) => (value) => {\r\n        if (this.props.stateless || value === undefined || value === null) return\r\n        if (prevValue !== value) {\r\n            prevValue = value\r\n            this.setState({value})\r\n        }\r\n    })('')\r\n\r\n    invokeListeners = ((prevState) => (eventValue) => {\r\n        const currentState = () => this.props.stateless ? eventValue : this.state\r\n\r\n        if (currentState() === undefined || (!this.props.stateless && JSON.stringify(prevState) === JSON.stringify(currentState()))) return\r\n        prevState = currentState()\r\n\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(prevState)\r\n        }\r\n    })(this.props.stateless ? this.props.value : this.state)\r\n\r\n\r\n    render() {\r\n        const {value} = this.state\r\n        const html = value === undefined || value === null ? '' : (value.toString ? value.toString() : '')\r\n        return (\r\n\r\n            <ContentEditable html={html} innerRef={this.ref} onChange={this.handleOnChange} tagName={this.props.tagName} style={{'wordWrap': 'break-word'}} className={this.props.className} disabled={this.props.disabled} />\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.value)\r\n        if (!this.props.stateless) this.invokeListeners()\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.value)\r\n        if (!this.props.stateless) this.invokeListeners()\r\n    }\r\n}\r\n\r\nEditableTag.propTypes = {\r\n    stateless: PropTypes.bool,\r\n    /**\r\n     * in stateless mode value define component's state but in stateful mode it's default value and set up only once\r\n     */\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    /**\r\n     * returned value will be pass to external onChange functions and written in inner state\r\n     * @param string value\r\n     * @return (string|number|null)\r\n     */\r\n    formatValue: PropTypes.func,\r\n    tagName: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    className: PropTypes.string,\r\n    /** prepare value to render\r\n     * @return string\r\n     */\r\n}\r\nEditableTag.defaultProps = {\r\n    stateless: false,\r\n    value: '',\r\n    tagName: 'div',\r\n    disabled: true,\r\n}\r\n\r\nexport default EditableTag\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from \"check-types\"\r\nimport {Button} from \"react-bootstrap\"\r\n\r\nclass InUseButton extends PureComponent {\r\n    state = {\r\n        value: this.props.defaultValue\r\n    }\r\n    handleOnClick = (e) => {\r\n        this.setState({value: !this.state.value})\r\n    }\r\n\r\n    setDefaultValue = ((prevValue) => (value) => {\r\n        if (prevValue !== value) {\r\n            prevValue = value\r\n            this.setState({value})\r\n        }\r\n    })(true)\r\n\r\n    invokeListeners = () => {\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.state.value ?\r\n            <Button bsStyle=\"success\" bsSize=\"xsmall\" onClick={this.handleOnClick}>inUse</Button> :\r\n            <Button bsStyle=\"danger\" bsSize=\"xsmall\" onClick={this.handleOnClick}>not inUse</Button>\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nInUseButton.propTypes = {\r\n    defaultValue: PropTypes.bool,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n\r\n}\r\nInUseButton.defaultProps = {\r\n    defaultValue: true\r\n}\r\nexport default InUseButton\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport {Table} from 'react-bootstrap'\r\nimport EditableTag from '../Base/EditableTag'\r\nimport InUseButton from '../InUseButton'\r\n\r\nclass Modules extends PureComponent {\r\n    modulesSet = () => {\r\n        const {data} = this.props\r\n        if (check.not.array(data)) return\r\n        return data.map((module, index) => {\r\n            const button = <InUseButton defaultValue={module.module_item_in_use} onChange={this.props.onChange('module_item_in_use')(index)} />\r\n            return (\r\n                <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td className={module.module_item_not_found ? 'bg-danger' : null}>{module.module}</td>\r\n                    <td>{module.module_item_sn}</td>\r\n                    <EditableTag disabled={false} tagName={'td'} value={module.module_item_comment} onChange={this.props.onChange('module_item_comment')(index)}/>\r\n                    <td align=\"center\" valign=\"middle\">{button}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Table responsive bordered striped condensed style={{\"tableLayout\": \"fixed\"}}  >\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"col-xs-1 text-center\">#</th>\r\n                        <th className=\"col-xs-3 text-center\" align=\"middle\">Модуль</th>\r\n                        <th className=\"col-xs-3 text-center\" align=\"middle\">SN</th>\r\n                        <th className=\"col-xs-3 text-center\" align=\"middle\">Комментарий</th>\r\n                        <th className=\"col-xs-1 text-center\" align=\"middle\">In Use</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.modulesSet()}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n\r\nModules.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.shape({\r\n        module: PropTypes.string,\r\n        module_id: PropTypes.number,\r\n        module_in_use: PropTypes.bool,\r\n        module_item_details: PropTypes.object,\r\n        module_item_comment: PropTypes.string,\r\n        module_item_id: PropTypes.number,\r\n        module_item_sn: PropTypes.string,\r\n        module_not_found: PropTypes.bool,\r\n    })),\r\n    onChange: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n}\r\nModules.defaultProps = {\r\n    data: []\r\n}\r\n\r\nexport default Modules\r\n","import React, {PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport css from './style.module.css'\r\nimport {FormGroup, FormControl, ControlLabel} from 'react-bootstrap'\r\n\r\nclass IpAddressEdit extends PureComponent {\r\n    state = {\r\n        ip: '',\r\n        mask: ''\r\n    }\r\n\r\n    setDefaultIp = ((prevValue) => (value) => {\r\n        if (check.nonEmptyString(value) && prevValue !== value) {\r\n            prevValue = value\r\n            this.setState({ip: value})\r\n        }\r\n    })('')\r\n    setDefaultMask = ((prevValue) => (value) => {\r\n        if (check.integer(value) && prevValue !== value) {\r\n            prevValue = value\r\n            this.setState({mask: value})\r\n        }\r\n    })('')\r\n\r\n    // handleChangeIp = (e) => {\r\n    //     this.setState({ip: e.target.value})\r\n    // }\r\n    // handleChangeMask = (e) => {\r\n    //     this.setState({mask: e.target.value})\r\n    // }\r\n    handleChangeIp = (e) => {\r\n        this.setState({ip: e.target.value})\r\n    }\r\n    handleChangeMask = (e) => {\r\n        this.setState({mask: e.target.value})\r\n    }\r\n\r\n    // invokeListeners = () => {\r\n    //     let {onChange} = this.props\r\n    //     if (check.function(onChange)) {\r\n    //         onChange = [onChange]\r\n    //     }\r\n    //     if (check.not.array(onChange)) return\r\n    //     for (const subscriber of onChange) {\r\n    //         subscriber(Object.assign({}, this.state))\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        const clearMargin = this.props.clearMargin ? css.formGroupZeroMargin : undefined\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        const formControlIp = <FormControl\r\n            type=\"text\"\r\n            // value={this.state.ip}\r\n            value={this.props.ip}\r\n            placeholder={this.props.placeholder}\r\n            // onChange={this.handleChangeIp}\r\n            onChange={this.props.onChangeIp}\r\n            readOnly={this.props.readOnly}\r\n            disabled={this.props.disabled}\r\n            className={css.ip}\r\n        />\r\n        const formControlMask= <FormControl\r\n            type=\"text\"\r\n            // value={this.state.mask}\r\n            value={this.props.mask}\r\n            placeholder={this.props.placeholder}\r\n            // onChange={this.handleChangeMask}\r\n            onChange={this.props.onChangeMask}\r\n            readOnly={this.props.readOnly}\r\n            disabled={this.props.disabled}\r\n            className={css.mask}\r\n        />\r\n        return (\r\n            <Fragment>\r\n                <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                    {controlLabel}\r\n                    {formControlIp} / {formControlMask}\r\n                </FormGroup>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.setDefaultIp(this.props.ip)\r\n        // this.setDefaultMask(this.props.mask)\r\n        // this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        // this.setDefaultIp(this.props.ip)\r\n        // this.setDefaultMask(this.props.mask)\r\n        // this.invokeListeners()\r\n    }\r\n}\r\n\r\nIpAddressEdit.propTypes = {\r\n\r\n    label: PropTypes.string,\r\n    controlId: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    ip: PropTypes.string,\r\n    mask: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    onChangeIp: PropTypes.func,\r\n    onChangeMask: PropTypes.func,\r\n    clearMargin: PropTypes.bool\r\n}\r\nIpAddressEdit.defaultProps = {\r\n    label: '',\r\n    disabled: false,\r\n    clearMargin: true\r\n}\r\nexport default IpAddressEdit\r\n\r\n","import React, {PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport isEqual from 'lodash/isEqual'\r\nimport check from \"check-types\"\r\nimport Input2 from \"../Base/Input2\"\r\nimport Select from \"../Base/Select\"\r\nimport {Row, Col, Checkbox, Table, Button} from \"react-bootstrap\"\r\nimport IpAddressEdit from '../IpAddressEdit'\r\n\r\nclass Ports extends PureComponent {\r\n    state = {\r\n        ports: [],\r\n        ipEditMode: false,\r\n    }\r\n\r\n    setDefaultState = ((prevState) => (ports) => {\r\n        if (check.not.array(ports) || ports.length === 0) return\r\n        const portsCopy = cloneDeep(ports)\r\n        const newState = portsCopy.map((port) => {\r\n            return {...port, port_mask_len: (port.port_mask_len === null ? '' : port.port_mask_len)}\r\n        })\r\n        if (isEqual(prevState, newState)) return\r\n\r\n        prevState = newState\r\n        this.setState({ports: newState})\r\n    })([])\r\n\r\n    ipFormat = (value) => {\r\n        const reg = new RegExp('^[0-9.]*$')\r\n        return reg.test(value)\r\n    }\r\n    numericFormat = (value) => {\r\n        const reg = new RegExp('^[0-9]*$')\r\n        return reg.test(value)\r\n    }\r\n    macAddressFormat = (value) => {\r\n        const reg = new RegExp('^[0-9a-fA-F:]*$')\r\n        return reg.test(value)\r\n    }\r\n\r\n    handlerOnChangeCheckbox = (index) => () => {\r\n        this.setState({ports: this.state.ports.map((port, idx) => {return idx === index ? {...port, port_is_mng: !port.port_is_mng} : {...port, port_is_mng: false}})})\r\n    }\r\n    onChangeIp = (index) => (e) => {\r\n        if (!(this.ipFormat(e.target.value))) return\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_ip = e.target.value\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n    onChangeMask = (index) => (e) => {\r\n        if (!(this.numericFormat(e.target.value))) return\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_mask_len = e.target.value\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n    onChangePortName = (index) => (e) => {\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_details.portName = e.target.value\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n    onChangePortMac = (index) => (e) => {\r\n        if (!(this.macAddressFormat(e.target.value))) return\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_mac = e.target.value\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n    onChangePortDescription = (index) => (e) => {\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_details.description = e.target.value\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n    onChangeVrf = (index) => ({value}) => {\r\n        const [vrf] = this.props.vrfData.filter((item) => {return item.vrf_id === value})\r\n        // return\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_vrf_id = value\r\n            newPorts[index].port_vrf_name = vrf.vrf_name\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n\r\n    invokeListeners = ((prevState) => () => {\r\n        if (isEqual(prevState, this.state)) return\r\n        prevState = cloneDeep(this.state)\r\n\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    })({})\r\n    vrfList = ((prevVrfData, prevList) => () => {\r\n        const {vrfData} = this.props\r\n        if (JSON.stringify(prevVrfData) === JSON.stringify(vrfData))  return prevList\r\n        if (check.not.array(vrfData)) return prevList\r\n        prevVrfData = vrfData\r\n        prevList = vrfData.map((vrf) => {\r\n            return {value: vrf.vrf_id, label: vrf.vrf_name}\r\n        })\r\n        return prevList\r\n    })([], [])\r\n    vrfName = (vrfId) => {\r\n        if (vrfId === null || vrfId === undefined) return ''\r\n        const vrfData = this.props.vrfData || []\r\n        const [vrf] = vrfData.filter((vrf) => {\r\n            return vrf && vrf.vrf_id && vrf.vrf_id === vrfId\r\n        })\r\n        return vrf.vrf_name || ''\r\n    }\r\n    // vrfList = () => [{value: 1, label: 'global'}, {value: 2, label: 'global2'}]\r\n    newPort = () => {\r\n        const vrfList = this.vrfList()\r\n        const vrf_id = vrfList[0] ? vrfList[0].value : null\r\n        return {\r\n            port_id: null,\r\n            port_ip: '0.0.0.0',\r\n            port_comment: '',\r\n            port_details: {\r\n                portName: '',\r\n                description: ''\r\n            },\r\n            port_is_mng: false,\r\n            port_mac: '00:00:00:00:00:00',\r\n            port_mask_len: '',\r\n            port_vrf_id: vrf_id,\r\n            // port_vrf_name: vrf_name,\r\n            newPort: true,\r\n            deleted: false\r\n        }\r\n    }\r\n    onClickAddPort = () => {\r\n        const updatedPorts = cloneDeep(this.state.ports)\r\n        if (check.not.array(updatedPorts)) return\r\n        updatedPorts.push(this.newPort())\r\n        this.setState({ports: updatedPorts})\r\n    }\r\n    onClickDelPort = (index) => () => {\r\n        const updatedPorts = cloneDeep(this.state.ports)\r\n        if (check.not.array(updatedPorts)) return\r\n        updatedPorts[index].deleted = true\r\n        this.setState({ports: updatedPorts})\r\n    }\r\n\r\n\r\n    portsSet = () => {\r\n        const data = this.state.ports\r\n        if (check.not.array(data)) return\r\n        const createdPorts = []\r\n        const existedPorts = []\r\n        const defaultVrf = this.vrfList()[0] ? this.vrfList()[0].value : ''\r\n        data.forEach((port, index) => {\r\n            let {port_ip, port_mac, port_mask_len, port_is_mng, port_details, port_vrf_id, newPort, deleted} = port\r\n            if (!newPort) {\r\n                const ipCell = port_is_mng ?\r\n                    <IpAddressEdit ip={port_ip} mask={port_mask_len } onChangeIp={this.onChangeIp(index)} onChangeMask={this.onChangeMask(index)} /> :\r\n                    (port_mask_len === '' ? `${port_ip}`: `${port_ip}/${port_mask_len}`)\r\n                existedPorts.push(\r\n                    <tr key={index}>\r\n                        <td>{index + 1}</td>\r\n                        <td>{port_details && port_details.portName}</td>\r\n                        <td>{this.vrfName(port_vrf_id)}</td>\r\n                        <td>{ipCell}</td>\r\n                        <td>{port_mac}</td>\r\n                        <td>{port_details && port_details.description}</td>\r\n                        <td align=\"center\" valign=\"middle\">\r\n                            <Checkbox title=\"management interface\" onChange={this.handlerOnChangeCheckbox(index)} checked={port_is_mng} style={{marginTop: 0, marginBottom: 0}}/>\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            } else {\r\n                if (deleted) return\r\n                const ipCell = <IpAddressEdit ip={port_ip} mask={port_mask_len } onChangeIp={this.onChangeIp(index)} onChangeMask={this.onChangeMask(index)} />\r\n                createdPorts.push(\r\n                    <tr key={index}>\r\n                        <td><Button bsStyle=\"danger\" bsSize=\"xsmall\" onClick={this.onClickDelPort(index)}>Delete</Button></td>\r\n                        <td><Input2 customSize clearMargin value={port_details && port_details.portName} onChange={this.onChangePortName(index)} /></td>\r\n                        <td><Select optionList={this.vrfList()} defaultSelected={defaultVrf} onChange={this.onChangeVrf(index)} isAsync={false} emptyOption={false} clearMargin smallSize /></td>\r\n                        <td>{ipCell}</td>\r\n                        <td><Input2 customSize clearMargin value={port_mac} onChange={this.onChangePortMac(index)} /></td>\r\n                        <td><Input2 customSize clearMargin value={port_details && port_details.description} onChange={this.onChangePortDescription(index)} /></td>\r\n                        <td align=\"center\" valign=\"middle\">\r\n                            <Checkbox title=\"management interface\" onChange={this.handlerOnChangeCheckbox(index)} checked={port_is_mng} style={{marginTop: 0, marginBottom: 0}}/>\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            }\r\n        })\r\n        return [...createdPorts.reverse(), ...existedPorts]\r\n    }\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Col md={12}>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <Button bsStyle=\"primary\" bsSize=\"small\" style={{marginBottom: '1em'}} onClick={this.onClickAddPort}>Add port</Button>\r\n                        <Table responsive bordered striped condensed style={{\"tableLayout\": \"fixed\"}}  >\r\n                            <thead>\r\n                            <tr>\r\n                                <th className=\"col-xs-1 text-center\">#</th>\r\n                                <th className=\"col-xs-2 text-center\" align=\"middle\">Имя порта</th>\r\n                                <th className=\"col-xs-1 text-center\" align=\"middle\">VRF</th>\r\n                                <th className=\"col-xs-2 text-center\" align=\"middle\">IP</th>\r\n                                <th className=\"col-xs-2 text-center\" align=\"middle\">MAC</th>\r\n                                <th className=\"col-xs-3 text-center\" align=\"middle\">Комментарий</th>\r\n                                <th className=\"col-xs-1 text-center\" align=\"middle\">Management</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.portsSet()}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultState(this.props.data)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.setDefaultState(this.props.data)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nPorts.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.shape({\r\n        port_id: PropTypes.number,\r\n        port_is_mng: PropTypes.bool,\r\n        port_ip: PropTypes.string,\r\n        port_mac: PropTypes.string,\r\n        port_mask_len: PropTypes.number,\r\n        port_details: PropTypes.shape({\r\n            portName: PropTypes.string,\r\n            description: PropTypes.string,\r\n        }),\r\n        port_comment: PropTypes.string,\r\n        port_vrf_id: PropTypes.number,\r\n    })),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    vrfData: PropTypes.arrayOf(PropTypes.shape({\r\n        vrf_id: PropTypes.number,\r\n        vrf_name: PropTypes.string,\r\n        vrf_rd: PropTypes.string,\r\n        vrf_comment: PropTypes.string,\r\n    }))\r\n}\r\n\r\nexport default Ports\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Table} from 'react-bootstrap'\r\nimport EditableTag from \"../Base/EditableTag\"\r\nimport Select from \"../Base/Select\"\r\n\r\nclass DevLocation extends PureComponent {\r\n    render() {\r\n        const {onChange, floor, row, rack, unit, rackSide} = this.props\r\n        const rackSideOptions = [{value: \"Front\", label: \"Front\"}, {value: \"Back\", label: \"Back\"}]\r\n        return (\r\n            <Table responsive bordered condensed style={{\"tableLayout\": \"fixed\"}}  >\r\n                <thead>\r\n                <tr>\r\n                    <th className=\"col-xs-2 text-center\" align=\"middle\">Этаж</th>\r\n                    <th className=\"col-xs-2 text-center\" align=\"middle\">Ряд</th>\r\n                    <th className=\"col-xs-2 text-center\" align=\"middle\">Стойка</th>\r\n                    <th className=\"col-xs-2 text-center\" align=\"middle\">Unit</th>\r\n                    <th className=\"col-xs-3 text-center\" align=\"middle\">Сторона стойки</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <EditableTag disabled={false} tagName='td' value={floor} onChange={onChange('floor')} />\r\n                        <EditableTag disabled={false} tagName='td' value={row} onChange={onChange('row')} />\r\n                        <EditableTag disabled={false} tagName='td' value={rack} onChange={onChange('rack')} />\r\n                        <EditableTag disabled={false} tagName='td' value={unit} onChange={onChange('unit')} />\r\n                        <td><Select style={{marginBottom: 0}} isAsync={false} optionList={rackSideOptions} defaultSelected={rackSide} onChange={onChange('rackSide')} /></td>\r\n                    </tr>\r\n\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n\r\nDevLocation.propTypes = {\r\n    floor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    row: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    rack: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    unit: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    rackSide: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n}\r\nDevLocation.defaultProps = {\r\n    floor: '',\r\n    row: '',\r\n    rack: '',\r\n    unit: '',\r\n    rackSide: ''\r\n}\r\n\r\nexport default DevLocation\r\n","import React, {Component} from 'react'\r\nimport check from 'check-types'\r\nimport custCss from './style.module.css'\r\nimport axios from 'axios'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport isEqual from 'lodash/isEqual'\r\nimport {Row, Col, Button, Modal, ModalBody, ModalFooter, ModalHeader, } from 'react-bootstrap'\r\nimport Office from '../components/Office'\r\nimport Region from '../components/Region'\r\nimport City from '../components/City'\r\nimport DevType from '../components/DevType'\r\nimport Platform from '../components/Platform'\r\nimport Software from '../components/Software'\r\nimport Input from '../components/Base/Input'\r\nimport Input2 from '../components/Base/Input2'\r\nimport TextArea from '../components/Base/TextArea'\r\nimport TextArea2 from '../components/Base/TextArea2'\r\nimport CheckBox from '../components/Base/CheckBox'\r\nimport Modules from '../components/Modules'\r\nimport Ports from '../components/Ports'\r\nimport DevLocation from '../components/DevLocation'\r\nimport {DEV_DATA_URL, DEV_LOCATION_URL, DEV_MODULES_DATA_URL, DEV_PORTS_DATA_URL, DEV_SUBMIT_URL, VRF_LIST_URL} from'../constants'\r\n\r\nclass EditDevWindow extends Component {\r\n    // constructor(props, context) {\r\n    //     super(props, context);\r\n    //     // this.handleShow = this.handleShow.bind(this);\r\n    //     // this.handleClose = this.handleClose.bind(this);\r\n    // }\r\n     /**\r\n      * @typedef {{\r\n      *      floor: (number|string),\r\n      *      row: (number|string),\r\n      *      rack: (number|string),\r\n      *      unit: (number|string),\r\n      *      rackSide: string\r\n      * }} Site\r\n      *\r\n      * @typedef {{\r\n      *      hostname: string,\r\n      *      site: Site\r\n      * }} DevDetails\r\n      *\r\n      * @typedef {{\r\n      *     dev_id: number,\r\n      *     location_id: number,\r\n      *     platform_id: number,\r\n      *     platform_item_id: number,\r\n      *     software_id: number,\r\n      *     software_item_id: number,\r\n      *     vendor_id: number,\r\n      *     dev_type_id: number,\r\n      *     dev_comment: string,\r\n      *     software_item_comment: string,\r\n      *     dev_last_update: string,\r\n      *     dev_in_use: boolean,\r\n      *     platform_item_sn: string,\r\n      *     platform_item_sn_alt: string,\r\n      *     is_hw: boolean,\r\n      *     software_item_ver: string,\r\n      *     dev_details: (DevDetails|object),\r\n      *     software_item_details: object\r\n      * }} DevInfo\r\n      *\r\n      * @typedef {{\r\n      *     module: string,\r\n      *     module_id: number,\r\n      *     module_item_id: number,\r\n      *     module_item_details: object,\r\n      *     module_item_comment: string,\r\n      *     module_item_sn: string,\r\n      *     module_item_in_use: boolean,\r\n      *     module_item_not_found: boolean\r\n      *     module_item_last_update: string\r\n      * }} Module\r\n      *\r\n      * @typedef {{\r\n      *     description: string,\r\n      *     portName: string\r\n      * }} PortDetails\r\n      *\r\n      * @typedef {{\r\n      *     port_id: number,\r\n      *     port_type_id: number,\r\n      *     port_ip: string,\r\n      *     port_comment: string,\r\n      *     port_details: PortDetails,\r\n      *     port_is_mng: boolean,\r\n      *     port_mac: string,\r\n      *     port_mask_len: (string|number),\r\n      *     port_type: string,\r\n      *     port_last_update: string,\r\n      *     port_net_id: number,\r\n      *     port_vrf_id: number,\r\n      *     newPort: boolean // for created ports is true\r\n      *     deleted: boolean // for deleted ports is true\r\n      * }} Port\r\n      *\r\n      * @typedef {{\r\n      *     region_id: number,\r\n      *     city_id: number,\r\n      *     office_id: number\r\n      *     office_comment\r\n      * }} GeoLocation\r\n      *\r\n      * @typedef {{\r\n      *     accessor: string,\r\n      *     statement: string,\r\n      *     value: (string|number)\r\n      * }} Filter\r\n      *\r\n      * @typedef {{\r\n      *     vrf_id: number,\r\n      *     vrf_name: string,\r\n      *     vrf_rd: string\r\n      *     vrf_comment: string\r\n      * }} Vrf\r\n      */\r\n\r\n      /**\r\n      * @type {{\r\n      *     show: boolean,\r\n      *     devId: (number|string),\r\n      *     devDataLoading: boolean,\r\n      *     devDataReady: boolean,\r\n       *     mngPorts: array\r\n      * }} state\r\n      */\r\n    state = {\r\n        show: false,\r\n        devId: '',\r\n        devDataLoading: false,\r\n        devDataReady: false,\r\n        mngPorts: [],\r\n        mngIp: '',\r\n        officeComment: '',\r\n        loadingOfficeData: false,\r\n        officeDataInvalidate: true,\r\n        saving: false,\r\n        region_id: '',\r\n        city_id: '',\r\n    }\r\n    /**\r\n     * @type {{\r\n     *    geoLocation: (GeoLocation|object),\r\n     *     devInfo: (DevInfo|object),\r\n     *     modules: (Module[]|Array),\r\n     *     ports: (Port[]|Array)\r\n     * }} initialData\r\n     */\r\n    initialData = {\r\n        geoLocation: {},\r\n        devInfo: {},\r\n        modules: [],\r\n        ports: [],\r\n    }\r\n\r\n    /**\r\n     * @type {{\r\n     *     geoLocation: (GeoLocation|object),\r\n     *     devInfo: (DevInfo|object),\r\n     *     modules: (Module[]|Array),\r\n     *     ports: (Port[]|Array),\r\n     *     mngIp: string\r\n     * }} currentState\r\n     */\r\n    currentState = {\r\n        geoLocation: {},\r\n        devInfo: {},\r\n        modules: [],\r\n        ports: [],\r\n\r\n    }\r\n    /**\r\n     * @type Filter cityFilter\r\n     */\r\n    cityFilter = {\r\n        accessor: 'region_id',\r\n        statement: '=',\r\n        value: ''\r\n    }\r\n    /**\r\n     * @type Filter officeFilter\r\n     */\r\n    officeFilter = {\r\n        accessor: 'city_id',\r\n        statement: '=',\r\n        value: ''\r\n    }\r\n    /**\r\n     *\r\n     * @type Site siteInfo\r\n     */\r\n    siteInfo = {\r\n        floor: '',\r\n        row: '',\r\n        rack: '',\r\n        unit: '',\r\n        rackSide: '',\r\n    }\r\n    /**\r\n     *\r\n     * @type (Vrf[]|Array)\r\n     */\r\n    vrfList = []\r\n    getDevLocation = async (location_id) => {\r\n        try {\r\n            const res = await axios.get(DEV_LOCATION_URL, {\r\n                params: {location_id: location_id}\r\n            })\r\n            const {data} = res\r\n            if (!data.location) {\r\n                console.log('ERROR: getDevLocation for loc_id ', data, location_id)\r\n                return {}\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: getDevLocation', e.toString())\r\n            return {}\r\n        }\r\n    }\r\n\r\n    managingIp = (portsInfo) => {\r\n        if (!check.array(portsInfo)) return\r\n        const res = portsInfo.filter((port) => port.port_is_mng).map((port) => port.port_ip)\r\n        return res.join(', ')\r\n    }\r\n    handleShow = () => {\r\n        this.setState({ show: true });\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({ show: false });\r\n    }\r\n    dataValidate = (devData) => {\r\n        const errors = []\r\n        if (check.not.number(devData.geoLocation.office_id)) errors.push('Не указан оффис')\r\n        return errors\r\n    }\r\n    handleSubmit = async() => {\r\n        const errors = this.dataValidate(this.currentState)\r\n        console.log('save', this.currentState)\r\n        if (check.nonEmptyArray(errors)) {\r\n            alert(errors.join(\"\\n\"))\r\n            return\r\n        }\r\n        try {\r\n            this.setState({saving: true})\r\n            // console.log('currentState', this.currentState)\r\n            /**\r\n             * @typedef {{\r\n             *     code: number,\r\n             *     message: string\r\n             * }} Error\r\n             * @type {{\r\n             *     errors: Error[]\r\n             * }} res\r\n             */\r\n            const res = await axios.post(DEV_SUBMIT_URL, this.currentState)\r\n            const {data} = res\r\n            if (data.errors) throw data.errors.join(\"\\n\")\r\n            this.setState({saving: false})\r\n            console.log('SAVE RESULT', data.result)\r\n            if (window.updateDevTable) {\r\n                window.updateDevTable()\r\n            } else {\r\n                console.log('function updateDevTable not found')\r\n            }\r\n            setTimeout(() => {this.handleClose()}, 700)\r\n        } catch (e) {\r\n            console.log('ERROR: ', e)\r\n            alert(e)\r\n            this.setState({saving: false})\r\n        }\r\n    }\r\n\r\n    onChangeGeoLocation = (key) => async ({value}) => {\r\n        const {geoLocation} = this.currentState\r\n        geoLocation[key] = value\r\n        if (key === 'region_id' || key === 'city_id') {\r\n            this.setState({[key]: value})\r\n        }\r\n        if (key === 'office_id') {\r\n            this.onChangeDevInfo('location_id')({value})\r\n            if (check.emptyString(value)) {\r\n                const {geoLocation} = this.currentState\r\n                geoLocation.office_comment = ''\r\n                this.setState({officeDataInvalidate: true, officeComment: ''})\r\n            } else {\r\n                this.setState({officeDataInvalidate: true, loadingOfficeData: true})\r\n                const res = await this.getDevLocation(value)\r\n                const {location = {}} = res\r\n                let {office_comment} = location\r\n                office_comment = office_comment ? office_comment : ''\r\n                const {geoLocation} = this.currentState\r\n                geoLocation.office_comment = office_comment\r\n                this.setState({officeComment: office_comment, officeDataInvalidate: false,loadingOfficeData: false})\r\n            }\r\n\r\n        }\r\n    }\r\n    onChangeOfficeComment = (e) => {\r\n        const {geoLocation} = this.currentState\r\n        geoLocation.office_comment = e.target.value\r\n        this.setState({officeComment: e.target.value})\r\n    }\r\n    onChangeDevInfo = (key) => ({value}) => {\r\n        const {devInfo} = this.currentState\r\n        devInfo[key] = value\r\n    }\r\n    onChangeDevDetails = (key) => ({value}) => {\r\n        const {devInfo} = this.currentState\r\n        if (! devInfo.dev_details) devInfo.dev_details = {}\r\n        devInfo.dev_details[key] = value\r\n    }\r\n    onChangeModule = (key) => (idx) => ({value}) => {\r\n        const {modules} = this.currentState\r\n        if (modules[idx] && modules[idx][key] !== value) {\r\n            modules[idx][key] = value\r\n        }\r\n    }\r\n    changeMngIpString = (ports) => {\r\n        if (!check.array(ports)) return\r\n        const res = ports.filter((port) => port.port_is_mng).map((port) => port.port_ip)\r\n        if (res.length > 0) {\r\n            this.setState({mngIp:res.join(', ') })\r\n        }\r\n    }\r\n    onChangePorts = ({ports}) => {\r\n        ports = ports.map((port) => {\r\n            return {...port, port_mask_len: port.port_mask_len === '' ? null : parseInt(port.port_mask_len)}\r\n        })\r\n        this.currentState.ports = ports\r\n        this.changeMngIpString(this.currentState.ports)\r\n    }\r\n    onChangeDevLocation = (key) => ({value}) => {\r\n        if (value === undefined || !this.state.devDataReady) return\r\n        const {devInfo} = this.currentState\r\n        if (!devInfo)  {\r\n            return\r\n        }\r\n        if (!devInfo.dev_details) devInfo.dev_details = {}\r\n        if ( !devInfo.dev_details.site) {\r\n            devInfo.dev_details.site = this.siteInfo\r\n        }\r\n        devInfo.dev_details.site[key] = value\r\n    }\r\n\r\n    fetchDeviceData = async (id) => {\r\n        try {\r\n            const res = await axios.get(DEV_DATA_URL, {\r\n                params: {id}\r\n            })\r\n            const {data} = res\r\n            if (!data.devInfo) {\r\n                console.log('ERROR: fetchDeviceData')\r\n                return {}\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: fetchDeviceData', e.toString())\r\n            return {}\r\n        }\r\n    }\r\n    fetchDevModulesData = async (id) => {\r\n        try {\r\n            const res = await axios.get(DEV_MODULES_DATA_URL, {\r\n                params: {id}\r\n            })\r\n            const {data} = res\r\n            if (!data.modules) {\r\n                console.log('ERROR: fetchDevModulesData')\r\n                return []\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: fetchDevModulesData', e.toString())\r\n            return []\r\n        }\r\n    }\r\n    fetchDevPortsData = async (id) => {\r\n        try {\r\n            const res = await axios.get(DEV_PORTS_DATA_URL, {\r\n                params: {id}\r\n            })\r\n            const {data} = res\r\n            if (!data.ports) {\r\n                console.log('ERROR: fetchDevPortsData')\r\n                return []\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: fetchDevPortsData', e.toString())\r\n            return []\r\n        }\r\n    }\r\n    fetchVrfList = async () => {\r\n        try {\r\n            const res = await axios.get(VRF_LIST_URL, {\r\n                params: {}\r\n            })\r\n            const {data} = res\r\n            if (!data.vrfList) {\r\n                console.log('ERROR: fetchVrfList')\r\n                return []\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: fetchVrfList', e.toString())\r\n            return []\r\n        }\r\n    }\r\n\r\n    memoizedCityFilter = ((prevFilter) => () => {\r\n        const newCityFilter = Object.assign({}, this.cityFilter, {value: this.state.region_id})\r\n        if (!isEqual(newCityFilter, prevFilter)) prevFilter = newCityFilter\r\n        return [prevFilter]\r\n    })([])\r\n\r\n    memoizedOfficeFilter = ((prevFilter) => () => {\r\n        const newCityFilter = Object.assign({}, this.cityFilter, {value: this.state.region_id})\r\n        const newOfficeFilter = Object.assign({}, this.officeFilter, {value: this.state.city_id})\r\n        const newFilter = [newCityFilter, newOfficeFilter]\r\n        if (!isEqual(prevFilter, newFilter)) prevFilter = newFilter\r\n        return prevFilter\r\n    })([])\r\n\r\n    render() {\r\n        const {geoLocation, devInfo, modules, ports} = this.initialData\r\n        const {devDataReady} = this.state\r\n        const devSite = (() => {\r\n            const {floor, row, rack, unit, rackSide} = devInfo && devInfo.dev_details && devInfo.dev_details.site ? devInfo.dev_details.site : {}\r\n            return {floor, row, rack, unit, rackSide}\r\n        })()\r\n\r\n        return (\r\n            <Modal show={this.state.show} onHide={this.handleClose} bsSize=\"large\" >\r\n                <ModalHeader closeButton>\r\n                    <Modal.Title>Редактирование устройства</Modal.Title>\r\n                </ModalHeader>\r\n                <ModalBody className={custCss.modalBody} >\r\n                    <Row>\r\n                        <Col md={2}><Region onChange={this.onChangeGeoLocation('region_id')} defaultSelected={geoLocation.region_id} disabled={!devDataReady}/></Col>\r\n                        <Col md={2}><City onChange={this.onChangeGeoLocation('city_id')} defaultSelected={geoLocation.city_id} filter={this.memoizedCityFilter()} disabled={!devDataReady}/></Col>\r\n                        <Col md={4}><Office onChange={this.onChangeGeoLocation('office_id')} defaultSelected={geoLocation.office_id} filter={this.memoizedOfficeFilter()} disabled={!devDataReady}/></Col>\r\n                        <Col md={4}><TextArea2 controlId=\"officeComment\" disabled={this.state.officeDataInvalidate || !devDataReady} onChange={this.onChangeOfficeComment} placeholder='Комментарий к офису' value={this.state.officeComment} label=\"Комментарий к оффису\" /></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={3}><DevType onChange={this.onChangeDevInfo('dev_type_id')} defaultSelected={devInfo.dev_type_id} /></Col>\r\n                        <Col md={3}><Platform onChange={this.onChangeDevInfo('platform_id')} defaultSelected={devInfo.platform_id}/></Col>\r\n                        <Col md={3}><Software onChange={this.onChangeDevInfo('software_id')}  defaultSelected={devInfo.software_id} /></Col>\r\n                        <Col md={3}><Input controlId='swVer' onChange={this.onChangeDevInfo('software_item_ver')} defaultValue={devInfo.software_item_ver} label=\"Версия ПО\"/></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={3}><Input controlId='devSn' addOnPosition=\"left\" addOnText=\"SN\" onChange={this.onChangeDevInfo('platform_item_sn')} defaultValue={devInfo.platform_item_sn} label=\" \" readOnly/></Col>\r\n                        <Col md={3}><Input controlId='devAltSn' addOnPosition=\"left\" addOnText=\"alt SN\" onChange={this.onChangeDevInfo('platform_item_sn_alt')} defaultValue={devInfo.platform_item_sn_alt} label=\" \" /></Col>\r\n                        <Col md={3}><Input controlId='hostname' addOnPosition=\"left\" addOnText=\"hostname\" onChange={this.onChangeDevDetails('hostname')} defaultValue={devInfo.dev_details && devInfo.dev_details.hostname} label=\" \" /></Col>\r\n                        <Col md={3}><Input2 readOnly controlId='managementIP' addOnPosition=\"left\" addOnText=\"management IP\" onChange={()=>{}} label=\" \" value={this.state.mngIp} /></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={6}><TextArea controlId=\"deviceComment\" onChange={this.onChangeDevInfo('dev_comment')} placeholder='Комментарий к устройству' defaultValue={devInfo.dev_comment} label=\"Коментарий к устройству\" /></Col>\r\n                    </Row>\r\n                    <Row><Col md={6}><CheckBox title=\"Устройство используется\" onChange={this.onChangeDevInfo('dev_in_use')} checked={devInfo.dev_in_use} >Устройство используется</CheckBox></Col></Row>\r\n                    <Row>\r\n                        <Col md={10}><Modules data={modules} onChange={this.onChangeModule} /></Col>\r\n                    </Row>\r\n                    <Ports data={ports} vrfData={this.vrfList} onChange={this.onChangePorts} />\r\n                    <Row>\r\n                        <Col md={10}>\r\n                            <DevLocation {...devSite} onChange={this.onChangeDevLocation} />\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Row>\r\n                        <Col md={8}>\r\n                            <h3 align=\"center\" style={{margin: 0}}>{this.state.saving ? 'Сохранение данных...' : ''}</h3>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Button onClick={this.handleClose} bsStyle=\"danger\" disabled={this.state.saving} >Отмена</Button>\r\n                            <Button onClick={this.handleSubmit} bsStyle=\"success\" disabled={this.state.saving}>Сохранить</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n    async componentDidMount() {\r\n        window.openEditModal = (id) => {\r\n            this.setState({\r\n                show: true,\r\n                devId: id,\r\n                devDataReady: false\r\n            })\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate() {\r\n        const {devId, devDataReady, devDataLoading} = this.state\r\n        if (devId && !devDataReady && !devDataLoading) {\r\n            this.setState({devDataLoading: true})\r\n            // const devData = await this.fetchDeviceData(this.state.devId)\r\n            try {\r\n                const response1 = await Promise.all([\r\n                    this.fetchDeviceData(devId),\r\n                    this.fetchDevModulesData(devId),\r\n                    this.fetchDevPortsData(devId),\r\n                    this.fetchVrfList()\r\n                ])\r\n                const [{devInfo}, {modules}, {ports}, {vrfList}] = response1\r\n                let geoLocation = {}\r\n                if (devInfo && devInfo.location_id) {\r\n                    const response2 = await this.getDevLocation(devInfo.location_id)\r\n                    const {location = {}} = response2\r\n                    geoLocation = (({office_id, city_id, region_id, office_comment}) => {return {office_id, city_id, region_id, office_comment}})(location)\r\n                }\r\n                this.initialData = {...this.initialData, devInfo, modules, ports, geoLocation}\r\n                this.vrfList = vrfList\r\n                this.currentState = {\r\n                    geoLocation: cloneDeep(geoLocation),\r\n                    devInfo: cloneDeep(devInfo),\r\n                    modules: cloneDeep(modules),\r\n                    ports: cloneDeep(ports),\r\n                }\r\n                this.setState({devDataLoading: false, devDataReady: true})\r\n            } catch (e) {\r\n                console.log('Loading dev data ERROR', e.toString())\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default EditDevWindow\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport EditDevWindow from './EditDevWindow';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<EditDevWindow />, document.getElementById('injectReact'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroupZeroMargin\":\"style_formGroupZeroMargin__1ocN6\",\"indents\":\"style_indents__CXmar\",\"ip\":\"style_ip__7oCzC style_indents__CXmar\",\"mask\":\"style_mask__1pKCo style_indents__CXmar\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroupZeroMargin\":\"style_formGroupZeroMargin__1CpZ5\",\"indents\":\"style_indents__2Irpo\",\"size\":\"style_size__QK4yj style_indents__2Irpo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroupZeroMargin\":\"style_formGroupZeroMargin__1eXLG\",\"indents\":\"style_indents__2-inD\",\"size\":\"style_size__2OfcW style_indents__2-inD\"};"],"sourceRoot":""}