{"version":3,"sources":["EditDevWindow/style.module.css","components/Base/Input/style.module.css","components/Base/Select/index.js","components/Base/RemoteDataProvider/index.js","constants.js","components/Office/index.js","components/Region/index.js","components/City/index.js","components/DevType/index.js","components/Platform/index.js","components/Software/index.js","components/Base/Input/index.js","components/Base/Input2/index.js","components/Base/TextArea/index.js","components/Base/TextArea2/index.js","components/Base/CheckBox/index.js","components/Base/EditableTag/index.js","components/InUseButton/index.js","components/Modules/index.js","components/IpAddressEdit/index.js","components/Ports/index.js","components/DevLocation/index.js","EditDevWindow/index.js","serviceWorker.js","index.js","components/IpAddressEdit/style.module.css","components/Base/Select/style.module.css","components/Base/Input2/style.module.css"],"names":["module","exports","modalBody","formGroupZeroMargin","Select","prevValue","prevFilter","prevState","state","value","isLoading","optionsInvalidate","optionList","setDefaultSelected","undefined","_this","filter","item","length","setState","handleChange","e","console","log","target","parseInt","isNaN","toString","defaultSelectedValue","checkSelected","props","disabled","checkFilter","isEqual","invokeListeners","JSON","stringify","onChange","check","function","not","array","cloneDeep","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","subscriber","err","return","buildOptionList","react_default","a","createElement","emptyOption","emptyValue","key","emptyLabel","optionsSet","map","_ref","label","concat","Object","toConsumableArray","this","isAsync","updateRemoteOptionList","updateLocalOptionList","remoteDataFetch","remoteDataFetchDefault","data","_context2","t0","remoteSourceUrl","axios","post","_context3","clearMargin","css","controlLabel","string","ControlLabel","react","FormGroup","controlId","style","bsClass","FormControl","componentClass","placeholder","className","smallSize","size","updateIfNeeded","defaultSelected","PureComponent","defaultProps","selected","RemoteDataProvider","url","asyncToGenerator","regenerator_default","mark","_callee","_ref2","wrap","_context","prev","sent","abrupt","emptyString","stop","_x","apply","arguments","BASE_URL","protocol","window","location","hostname","port","DEV_DATA_URL","DEV_MODULES_DATA_URL","DEV_PORTS_DATA_URL","DEV_LOCATION_URL","VRF_LIST_URL","DEV_SUBMIT_URL","REGIONS_URL","CITIES_URL","OFFICES_URL","DEV_TYPES","PLATFORMS","SOFTWARE_LIST","Office","optionListUpdater","Base_Select","assign","Region","City","DevType","Platform","updateOptionList","Software","Input","setDefaultValue","number","custCss","_this$props","addOnPosition","addOnText","formControl","type","readOnly","nonEmptyString","leftAddOn","InputGroup","Addon","rightAddOn","defaultValue","Input2","customSize","TextArea","TextArea2","CheckBox","checked","handleOnChange","Checkbox","title","children","EditableTag","ref","React","createRef","formatValue","stateless","eventValue","currentState","html","wordWrap","react_contenteditable_default","innerRef","tagName","InUseButton","handleOnClick","Button","bsStyle","bsSize","onClick","Modules","modulesSet","index","button","components_InUseButton","module_item_in_use","module_item_not_found","module_item_sn","Base_EditableTag","module_item_comment","margin","align","valign","Table","responsive","bordered","striped","condensed","tableLayout","IpAddressEdit","ip","mask","setDefaultIp","setDefaultMask","integer","handleChangeIp","handleChangeMask","formControlIp","onChangeIp","formControlMask","onChangeMask","Ports","prevVrfData","prevList","ports","ipEditMode","setDefaultState","newState","objectSpread","port_mask_len","ipFormat","RegExp","test","numericFormat","macAddressFormat","handlerOnChangeCheckbox","idx","port_is_mng","newPorts","port_ip","onChangePortName","port_details","portName","onChangePortMac","port_mac","onChangePortDescription","description","onChangeVrf","_this$props$vrfData$f","vrfData","vrf_id","vrf","slicedToArray","port_vrf_id","port_vrf_name","vrf_name","vrfList","vrfName","vrfId","_vrfData$filter","newPort","port_id","port_comment","deleted","onClickAddPort","updatedPorts","push","onClickDelPort","portsSet","createdPorts","existedPorts","defaultVrf","forEach","ipCell","components_IpAddressEdit","Base_Input2","marginTop","marginBottom","reverse","Row","Col","md","DevLocation","pStyle","padding","floor","row","rack","unit","rackSide","EditDevWindow","initialState","show","devId","devDataLoading","devDataReady","mngIp","officeComment","loadingOfficeData","officeDataInvalidate","saving","region_id","city_id","clearState","initialData","geoLocation","devInfo","modules","clearInitialData","clearCurrentState","cityFilter","accessor","statement","clearCityFilter","officeFilter","clearOfficeFilter","siteInfo","clearSiteInfo","clearFormData","getDevLocation","location_id","res","get","params","managingIp","portsInfo","join","handleShow","handleClose","dataValidate","devData","errors","office_id","handleSubmit","_callee2","nonEmptyArray","alert","result","updateDevTable","setTimeout","onChangeGeoLocation","_ref4","_callee3","_ref3","_res$location","office_comment","defineProperty","onChangeDevInfo","_x2","onChangeOfficeComment","_ref5","onChangeDevDetails","_ref6","dev_details","onChangeModule","_ref7","changeMngIpString","onChangePorts","_ref8","onChangeDevLocation","_ref9","site","fetchDeviceData","_callee4","id","_context4","fetchDevModulesData","_callee5","_context5","fetchDevPortsData","_callee6","_context6","fetchVrfList","_callee7","_context7","memoizedCityFilter","newCityFilter","memoizedOfficeFilter","newFilter","_this2","_this$initialData","devSite","_ref14","Modal","onHide","ModalHeader","closeButton","Title","ModalBody","components_Region","components_City","components_Office","Base_TextArea2","components_DevType","dev_type_id","components_Platform","platform_id","components_Software","software_id","Base_Input","software_item_ver","platform_item_sn","platform_item_sn_alt","Base_TextArea","dev_comment","Base_CheckBox","dev_in_use","components_Modules","components_Ports","components_DevLocation","ModalFooter","openEditModal","_this3","openCreateNewDevModal","newDev","Promise","all","response1","response2","_ref15","_context9","Component","Boolean","match","ReactDOM","render","src_EditDevWindow","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","indents"],"mappings":"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","file":"static/js/main.21ea8e47.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBody\":\"style_modalBody__2dIVL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroupZeroMargin\":\"style_formGroupZeroMargin__2exhN\"};","import React, { PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {FormControl, ControlLabel, FormGroup} from 'react-bootstrap'\r\nimport check from 'check-types'\r\nimport axios from \"axios\"\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport isEqual from 'lodash/isEqual'\r\nimport css from \"./style.module.css\"\r\n\r\nclass Select extends PureComponent {\r\n\r\n    state = {\r\n        value: '',\r\n        isLoading: false,\r\n        optionsInvalidate: true,\r\n    }\r\n    optionList = []\r\n\r\n    setDefaultSelected = ((prevValue) => (value) => {\r\n        if (value === undefined || value === null || this.state.optionsInvalidate || this.state.isLoading) return\r\n        if (prevValue === value) return\r\n        prevValue = value\r\n        if (this.optionList.filter((item) => item.value === value).length === 0) return\r\n        if (this.state.value === value) return\r\n        this.setState({value: prevValue})\r\n    })('')\r\n\r\n    handleChange = (e) => {\r\n        console.log('type', typeof e.target.value)\r\n        let value = parseInt(e.target.value)\r\n        if (!isNaN(value) && value.toString && value.toString() === e.target.value) {\r\n            this.setState({value})\r\n        }  else {\r\n            this.setState({value: e.target.value})\r\n        }\r\n    }\r\n    defaultSelectedValue = () => {\r\n        return this.optionList.length === 1 ? this.optionList[0].value : ''\r\n    }\r\n\r\n    checkSelected = () => {\r\n        if (this.state.isLoading || this.props.disabled) return\r\n        if (this.optionList.filter((item) => item.value === this.state.value).length === 0) this.setState({value: this.defaultSelectedValue()})\r\n    }\r\n    checkFilter = ((prevFilter) => () => {\r\n        const {filter} = this.props\r\n        if (isEqual(prevFilter, filter)) return\r\n        prevFilter = filter\r\n        return this.setState({optionsInvalidate: true})\r\n    })(this.props.filter)\r\n\r\n\r\n    invokeListeners = ((prevState) => () => {\r\n        if (JSON.stringify(this.state) === JSON.stringify(prevState)) return\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        prevState = cloneDeep(this.state)\r\n        for (const subscriber of onChange) {\r\n            subscriber(prevState)\r\n        }\r\n    })([])\r\n\r\n    async updateIfNeeded() {\r\n\r\n        const {isAsync, disabled} = this.props\r\n        const {isLoading, optionsInvalidate} = this.state\r\n\r\n        if (isLoading || disabled) return\r\n        this.checkFilter()\r\n        if (!optionsInvalidate) return\r\n        if (isAsync) {\r\n            this.setState({isLoading: true})\r\n            this.optionList = await this.updateRemoteOptionList()\r\n        } else {\r\n            this.optionList = this.updateLocalOptionList()\r\n        }\r\n        this.setState({isLoading: false, optionsInvalidate: false})\r\n    }\r\n\r\n    async updateRemoteOptionList() {\r\n        const {remoteDataFetch = this.remoteDataFetchDefault} = this.props\r\n        try {\r\n            const data = await remoteDataFetch(this.props.filter)\r\n            return check.array(data) ? data : []\r\n        } catch (error) {\r\n            console.log('error in Select: ', error)\r\n        }\r\n\r\n\r\n    }\r\n    updateLocalOptionList() {\r\n        return this.props.optionList\r\n    }\r\n\r\n    async remoteDataFetchDefault() {\r\n        const {remoteSourceUrl, filter=[]} = this.props\r\n        try {\r\n            const {data} = await axios.post(remoteSourceUrl, filter)\r\n            return check.array(data) ? data : []\r\n        } catch (error) {\r\n            console.log('error: ', error)\r\n        }\r\n    }\r\n\r\n    buildOptionList = () => {\r\n        const {isLoading} = this.state\r\n        if (isLoading) return <option value={null}>Loading...</option>\r\n\r\n        const emptyOption = <option value={this.props.emptyValue} key='empty'>{this.props.emptyLabel}</option>\r\n        const optionsSet = this.optionList.map(\r\n            ({value, label}, key) => {\r\n                return <option value={value} key={key}>{label}</option>\r\n            })\r\n        if (this.optionList.length === 1) {\r\n            return optionsSet\r\n        } else {\r\n            return this.props.emptyOption ? [emptyOption, ...optionsSet] : optionsSet\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const clearMargin = this.props.clearMargin ? css.formGroupZeroMargin : undefined\r\n        const {value} = this.state\r\n        const controlLabel = check.string(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        return (\r\n            <Fragment>\r\n                <FormGroup controlId={this.props.controlId} style={this.props.style} bsClass={clearMargin}>\r\n                    {controlLabel}\r\n                    <FormControl\r\n                        onChange={this.handleChange}\r\n                        componentClass=\"select\"\r\n                        placeholder=\"select item\"\r\n                        value={value}\r\n                        disabled={this.props.disabled}\r\n                        className={this.props.smallSize ? css.size : undefined}\r\n                    >\r\n                        {this.buildOptionList()}\r\n                    </FormControl>\r\n                </FormGroup>\r\n            </Fragment>\r\n        );\r\n    }\r\n    async componentDidMount() {\r\n        await this.updateIfNeeded()\r\n        this.setDefaultSelected(this.props.defaultSelected)\r\n        this.checkSelected()\r\n    }\r\n    async componentDidUpdate() {\r\n        await this.updateIfNeeded()\r\n        this.setDefaultSelected(this.props.defaultSelected)\r\n        this.checkSelected()\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * isAsync - if true, will be used  getDataUrl to get options list. optionList parameter will be ignored\r\n * onChange - function or array of functions, that will be invoke on state change\r\n */\r\nSelect.propTypes = {\r\n    controlId: PropTypes.string,\r\n    //local option list if isAsync = false\r\n    optionList: PropTypes.arrayOf(PropTypes.shape(\r\n        {\r\n            value: PropTypes.oneOfType([\r\n                PropTypes.number,\r\n                PropTypes.string\r\n            ]),\r\n            label: PropTypes.string\r\n        }\r\n    )),\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    emptyOption: PropTypes.bool, //add or not empty option into list\r\n    emptyValue: PropTypes.string,\r\n    emptyLabel: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    isAsync: PropTypes.bool,\r\n    remoteSourceUrl: PropTypes.string,\r\n    remoteDataFetch: PropTypes.func,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    })),\r\n    style: PropTypes.object,\r\n    clearMargin: PropTypes.bool,\r\n    smallSize: PropTypes.bool\r\n}\r\nSelect.defaultProps = {\r\n    emptyOption: true,\r\n    optionList: [],\r\n    isAsync: false,\r\n    onChange: [],\r\n    emptyValue: '',\r\n    emptyLabel: '<Не выбрано>',\r\n    filter: [],\r\n    selected: ''\r\n}\r\n\r\nexport default Select\r\n","import axios from 'axios'\r\nimport check from 'check-types'\r\n\r\nconst RemoteDataProvider = (url, key) => async function (filter) {\r\n    try {\r\n        const {data} = await axios.post(url, filter)\r\n        return data[key].filter(item => {\r\n            return check.not.emptyString(item.value)\r\n        })\r\n    } catch (error) {\r\n        console.log('error: ', error)\r\n        return [{\r\n            value: 'fetchDataError',\r\n            label: 'Ошибка запроса данных'\r\n        }]\r\n    }\r\n}\r\n\r\nexport default RemoteDataProvider","const DEVELOPED_BASE_URL = 'netcmdb-loc.rs.ru:8082'\r\nconst BASE_URL = (() => {\r\n    const protocol = window.location.protocol\r\n    const hostname = window.location.hostname\r\n    const port = window.location.port\r\n    const developMode = hostname === 'localhost'\r\n    return developMode ? `${protocol}//${DEVELOPED_BASE_URL}` : `${protocol}//${hostname}${port==='' ? '' : ':'}${port}`\r\n})()\r\nexport const DEV_DATA_URL = `${BASE_URL}/api/getDevData.json`\r\nexport const DEV_MODULES_DATA_URL = `${BASE_URL}/api/getDevModulesData.json`\r\nexport const DEV_PORTS_DATA_URL = `${BASE_URL}/api/getDevPortsData.json`\r\nexport const DEV_LOCATION_URL = `${BASE_URL}/api/getDevLocation.json`\r\nexport const VRF_LIST_URL= `${BASE_URL}/api/getVrfList.json`\r\nexport const DEV_SUBMIT_URL = `${BASE_URL}/api/saveDev.json`\r\nexport const REGIONS_URL = `${BASE_URL}/api/getRegions.json`\r\nexport const CITIES_URL = `${BASE_URL}/api/getCities.json`\r\nexport const OFFICES_URL = `${BASE_URL}/api/getOffices.json`\r\nexport const DEV_TYPES = `${BASE_URL}/api/getDevTypes.json`\r\nexport const PLATFORMS = `${BASE_URL}/api/getPlatforms.json`\r\nexport const SOFTWARE_LIST = `${BASE_URL}/api/getSoftwareList.json`\r\nconsole.log(\"BASE API URL\", BASE_URL)","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {OFFICES_URL} from '../../constants'\r\n\r\nclass Office extends PureComponent {\r\n\r\n    optionListUpdater = RemoteDataProvider(OFFICES_URL, 'offices')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.optionListUpdater} />\r\n    }\r\n}\r\n\r\n\r\nOffice.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nOffice.defaultProps = {\r\n    label: 'Офис',\r\n    controlId: 'officeSelector',\r\n}\r\n\r\nexport default Office\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import check from 'check-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {REGIONS_URL} from '../../constants'\r\n\r\nclass Region extends PureComponent {\r\n\r\n    optionListUpdater = RemoteDataProvider(REGIONS_URL, 'regions')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.optionListUpdater} />\r\n    }\r\n}\r\n\r\nRegion.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nRegion.defaultProps = {\r\n    label: 'Регион',\r\n    controlId: 'regionSelector',\r\n}\r\nexport default Region\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {CITIES_URL} from '../../constants'\r\n\r\n\r\nclass City extends PureComponent {\r\n\r\n    optionListUpdater = RemoteDataProvider(CITIES_URL, 'cities')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.optionListUpdater} />\r\n    }\r\n}\r\n\r\n\r\nCity.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nCity.defaultProps = {\r\n    label: 'Город',\r\n    controlId: 'citySelector',\r\n    // filter: {\r\n    //     accessor: 'region_id',\r\n    //     statement: '',\r\n    //     value: ''\r\n    // }\r\n}\r\n\r\nexport default City\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {DEV_TYPES} from '../../constants'\r\n\r\nclass DevType extends PureComponent {\r\n\r\n    optionListUpdater = RemoteDataProvider(DEV_TYPES, 'devTypes')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.optionListUpdater} />\r\n    }\r\n}\r\n\r\n\r\nDevType.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nDevType.defaultProps = {\r\n    label: 'Тип(роль)',\r\n    controlId: 'devTypeSelector',\r\n}\r\n\r\nexport default DevType\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {PLATFORMS} from '../../constants'\r\n\r\nclass Platform extends PureComponent {\r\n\r\n    updateOptionList = RemoteDataProvider(PLATFORMS, 'platforms')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.updateOptionList} />\r\n    }\r\n}\r\n\r\n\r\nPlatform.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nPlatform.defaultProps = {\r\n    label: 'Платформа',\r\n    controlId: 'platformSelector',\r\n}\r\n\r\nexport default Platform\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Select from '../Base/Select'\r\nimport RemoteDataProvider from '../Base/RemoteDataProvider'\r\nimport {SOFTWARE_LIST} from '../../constants'\r\n\r\nclass Software extends PureComponent {\r\n\r\n    optionListUpdater = RemoteDataProvider(SOFTWARE_LIST, 'softwareList')\r\n    render() {\r\n        return <Select {...this.props} isAsync remoteDataFetch={this.optionListUpdater} />\r\n    }\r\n}\r\n\r\n\r\nSoftware.propTypes = {\r\n    controlId: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    }))\r\n}\r\nSoftware.defaultProps = {\r\n    label: 'ПО',\r\n    controlId: 'softwareSelector',\r\n}\r\n\r\nexport default Software\r\n","import React, {PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport custCss from './style.module.css'\r\nimport {FormGroup, FormControl, ControlLabel, InputGroup} from 'react-bootstrap'\r\n\r\nclass Input extends PureComponent {\r\n    state = {\r\n        value: ''\r\n    }\r\n\r\n    setDefaultValue = ((prevValue) => (value) => {\r\n        if ((check.string(value) || check.number(value)) && prevValue !== value) {\r\n            prevValue = value\r\n            this.setState({value})\r\n        }\r\n    })('')\r\n\r\n    handleChange = (e) => {\r\n        this.setState({value: e.target.value})\r\n    }\r\n\r\n    invokeListeners = () => {\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const clearMargin = this.props.clearMargin ? custCss.formGroupZeroMargin : undefined\r\n        const {addOnPosition, addOnText} = this.props\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        const formControl = <FormControl\r\n            type=\"text\"\r\n            value={this.state.value}\r\n            placeholder={this.props.placeholder}\r\n            onChange={this.handleChange}\r\n            readOnly={this.props.readOnly}\r\n            disabled={this.props.disabled}\r\n            style={this.props.style}\r\n        />\r\n        if (addOnPosition && check.nonEmptyString(addOnText)) {\r\n            const leftAddOn = this.props.addOnPosition && this.props.addOnPosition === 'left' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            const rightAddOn = this.props.addOnPosition && this.props.addOnPosition === 'right' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        <InputGroup>\r\n                            {leftAddOn}\r\n                            {formControl}\r\n                            {rightAddOn}\r\n                        </InputGroup>\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        } else {\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        {formControl}\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nInput.propTypes = {\r\n    label: PropTypes.string,\r\n    controlId: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    defaultValue: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    addOnPosition: PropTypes.oneOf(['left', 'right']),\r\n    addOnText: PropTypes.string,\r\n    clearMargin: PropTypes.bool\r\n}\r\nInput.defaultProps = {\r\n    label: '',\r\n    disabled: false,\r\n}\r\nexport default Input\r\n\r\n","import React, {PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport css from './style.module.css'\r\nimport {FormGroup, FormControl, ControlLabel, InputGroup} from 'react-bootstrap'\r\n\r\nclass Input2 extends PureComponent {\r\n\r\n    render() {\r\n        const clearMargin = this.props.clearMargin ? css.formGroupZeroMargin : undefined\r\n        const {addOnPosition, addOnText} = this.props\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        const formControl = <FormControl\r\n            type=\"text\"\r\n            value={this.props.value}\r\n            placeholder={this.props.placeholder}\r\n            onChange={this.props.onChange}\r\n            readOnly={this.props.readOnly}\r\n            disabled={this.props.disabled}\r\n            className={this.props.customSize ? css.size : undefined}\r\n        />\r\n        if (addOnPosition && check.nonEmptyString(addOnText)) {\r\n            const leftAddOn = this.props.addOnPosition && this.props.addOnPosition === 'left' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            const rightAddOn = this.props.addOnPosition && this.props.addOnPosition === 'right' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        <InputGroup>\r\n                            {leftAddOn}\r\n                            {formControl}\r\n                            {rightAddOn}\r\n                        </InputGroup>\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        } else {\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        {formControl}\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n    componentDidUpdate() {\r\n    }\r\n}\r\n\r\nInput2.propTypes = {\r\n    customSize: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    controlId: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    value: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    addOnPosition: PropTypes.oneOf(['left', 'right']),\r\n    addOnText: PropTypes.string,\r\n    clearMargin: PropTypes.bool\r\n}\r\nInput2.defaultProps = {\r\n    disabled: false,\r\n    clearMargin: true\r\n}\r\nexport default Input2\r\n\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport {FormControl, FormGroup, ControlLabel} from 'react-bootstrap'\r\n\r\nclass TextArea extends PureComponent {\r\n    state = {\r\n        value: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({value: e.target.value})\r\n    }\r\n    invokeListeners = () => {\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    }\r\n    setDefaultValue = ((prevValue) => (value) => {\r\n        if (value === undefined || value === null) return\r\n        if (prevValue === value) return\r\n        prevValue = value\r\n        this.setState({value})\r\n        // if (check.nonEmptyString(value) && prevValue !== value) {\r\n        //     prevValue = value\r\n        //     this.setState({value})\r\n        // }\r\n    })('')\r\n\r\n    render() {\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        return (\r\n            <FormGroup controlId=\"formControlsTextarea\">\r\n                {controlLabel}\r\n                <FormControl componentClass=\"textarea\" placeholder={this.props.placeholder} onChange={this.handleChange} value={this.state.value} />\r\n            </FormGroup>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nTextArea.propTypes = {\r\n    label: PropTypes.string,\r\n    defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    controlId: PropTypes.string,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string\r\n}\r\nTextArea.defaultProps = {\r\n}\r\n\r\nexport default TextArea","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport {FormControl, FormGroup, ControlLabel} from 'react-bootstrap'\r\n\r\nclass TextArea2 extends PureComponent {\r\n\r\n    render() {\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        return (\r\n            <FormGroup controlId=\"formControlsTextarea\">\r\n                {controlLabel}\r\n                <FormControl componentClass=\"textarea\" placeholder={this.props.placeholder} onChange={this.props.onChange} value={this.props.value} disabled={this.props.disabled} />\r\n            </FormGroup>\r\n        )\r\n    }\r\n    componentDidMount() {}\r\n    componentDidUpdate() {}\r\n}\r\n\r\nTextArea2.propTypes = {\r\n    label: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    controlId: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string\r\n}\r\nTextArea2.defaultProps = {\r\n}\r\n\r\nexport default TextArea2","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from \"check-types\"\r\nimport {Checkbox} from \"react-bootstrap\"\r\n\r\nclass CheckBox extends PureComponent {\r\n    state = {\r\n        value: this.props.checked\r\n    }\r\n\r\n    handleOnChange = () => {\r\n        this.setState({value: !this.state.value})\r\n    }\r\n\r\n\r\n    setDefaultValue = ((prevState) => (value) => {\r\n        if (prevState !== value) {\r\n            prevState = value\r\n            this.setState({value})\r\n        }\r\n    })(this.props.checked)\r\n\r\n    invokeListeners = () => {\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Checkbox title={this.props.title} onChange={this.handleOnChange} checked={this.state.value} disabled={this.props.disabled} style={this.props.style} >{this.props.children}</Checkbox>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.checked)\r\n        this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.checked)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nCheckBox.propTypes = {\r\n    checked: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    style: PropTypes.object,\r\n}\r\nCheckBox.defaultProps = {\r\n    disabled: false,\r\n    checked: false\r\n}\r\n\r\nexport default CheckBox\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from \"check-types\"\r\nimport ContentEditable from \"react-contenteditable\"\r\n\r\nclass EditableTag extends PureComponent {\r\n\r\n    state = {\r\n        value: ''\r\n    }\r\n\r\n    ref = React.createRef()\r\n\r\n    formatValue = this.props.formatValue ? this.props.formatValue : (value) => value\r\n\r\n    handleOnChange = (e) => {\r\n        if (this.state.value === e.target.value) return\r\n        if (this.props.stateless) {\r\n            this.invokeListeners({value: this.formatValue(e.target.value)})\r\n        } else {\r\n            this.setState({value: e.target.value})\r\n        }\r\n    }\r\n\r\n    setDefaultValue = ((prevValue) => (value) => {\r\n        if (this.props.stateless || value === undefined || value === null) return\r\n        if (prevValue !== value) {\r\n            prevValue = value\r\n            this.setState({value})\r\n        }\r\n    })('')\r\n\r\n    invokeListeners = ((prevState) => (eventValue) => {\r\n        const currentState = () => this.props.stateless ? eventValue : this.state\r\n\r\n        if (currentState() === undefined || (!this.props.stateless && JSON.stringify(prevState) === JSON.stringify(currentState()))) return\r\n        prevState = currentState()\r\n\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(prevState)\r\n        }\r\n    })(this.props.stateless ? this.props.value : this.state)\r\n\r\n\r\n    render() {\r\n        const {value} = this.state\r\n        const html = value === undefined || value === null ? '' : (value.toString ? value.toString() : '')\r\n        const style = Object.assign({'wordWrap': 'break-word'}, this.props.style)\r\n        return (\r\n\r\n            <ContentEditable html={html} innerRef={this.ref} onChange={this.handleOnChange} tagName={this.props.tagName} style={style} className={this.props.className} disabled={this.props.disabled} />\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.value)\r\n        if (!this.props.stateless) this.invokeListeners()\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.value)\r\n        if (!this.props.stateless) this.invokeListeners()\r\n    }\r\n}\r\n\r\nEditableTag.propTypes = {\r\n    stateless: PropTypes.bool,\r\n    /**\r\n     * in stateless mode value define component's state but in stateful mode it's default value and set up only once\r\n     */\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    /**\r\n     * returned value will be pass to external onChange functions and written in inner state\r\n     * @param string value\r\n     * @return (string|number|null)\r\n     */\r\n    formatValue: PropTypes.func,\r\n    tagName: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    className: PropTypes.string,\r\n    style: PropTypes.object,\r\n}\r\nEditableTag.defaultProps = {\r\n    stateless: false,\r\n    value: '',\r\n    tagName: 'div',\r\n    disabled: true,\r\n}\r\n\r\nexport default EditableTag\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from \"check-types\"\r\nimport {Button} from \"react-bootstrap\"\r\n\r\nclass InUseButton extends PureComponent {\r\n    state = {\r\n        value: this.props.defaultValue\r\n    }\r\n    handleOnClick = (e) => {\r\n        this.setState({value: !this.state.value})\r\n    }\r\n\r\n    setDefaultValue = ((prevValue) => (value) => {\r\n        if (prevValue !== value) {\r\n            prevValue = value\r\n            this.setState({value})\r\n        }\r\n    })(true)\r\n\r\n    invokeListeners = () => {\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.state.value ?\r\n            <Button bsStyle=\"success\" bsSize=\"xsmall\" onClick={this.handleOnClick}>inUse</Button> :\r\n            <Button bsStyle=\"danger\" bsSize=\"xsmall\" onClick={this.handleOnClick}>not inUse</Button>\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nInUseButton.propTypes = {\r\n    defaultValue: PropTypes.bool,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n\r\n}\r\nInUseButton.defaultProps = {\r\n    defaultValue: true\r\n}\r\nexport default InUseButton\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport {Table} from 'react-bootstrap'\r\nimport EditableTag from '../Base/EditableTag'\r\nimport InUseButton from '../InUseButton'\r\n\r\nclass Modules extends PureComponent {\r\n    modulesSet = () => {\r\n        const {data} = this.props\r\n        if (check.not.array(data)) return\r\n        return data.map((module, index) => {\r\n            const button = <InUseButton defaultValue={module.module_item_in_use} onChange={this.props.onChange('module_item_in_use')(index)} />\r\n            return (\r\n                <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td className={module.module_item_not_found ? 'bg-danger' : null}>{module.module}</td>\r\n                    <td>{module.module_item_sn}</td>\r\n                    <td><EditableTag disabled={false} tagName={'p'} value={module.module_item_comment} onChange={this.props.onChange('module_item_comment')(index)} style={{margin: 0}}/></td>\r\n                    <td align=\"center\" valign=\"middle\">{button}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Table responsive bordered striped condensed style={{\"tableLayout\": \"fixed\"}}  >\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"col-xs-1 text-center\">#</th>\r\n                        <th className=\"col-xs-3 text-center\" align=\"middle\">Модуль</th>\r\n                        <th className=\"col-xs-3 text-center\" align=\"middle\">SN</th>\r\n                        <th className=\"col-xs-3 text-center\" align=\"middle\">Комментарий</th>\r\n                        <th className=\"col-xs-1 text-center\" align=\"middle\">In Use</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.modulesSet()}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n\r\nModules.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.shape({\r\n        module: PropTypes.string,\r\n        module_id: PropTypes.number,\r\n        module_in_use: PropTypes.bool,\r\n        module_item_details: PropTypes.object,\r\n        module_item_comment: PropTypes.string,\r\n        module_item_id: PropTypes.number,\r\n        module_item_sn: PropTypes.string,\r\n        module_not_found: PropTypes.bool,\r\n    })),\r\n    onChange: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n}\r\nModules.defaultProps = {\r\n    data: []\r\n}\r\n\r\nexport default Modules\r\n","import React, {PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport css from './style.module.css'\r\nimport {FormGroup, FormControl, ControlLabel} from 'react-bootstrap'\r\n\r\nclass IpAddressEdit extends PureComponent {\r\n    state = {\r\n        ip: '',\r\n        mask: ''\r\n    }\r\n\r\n    setDefaultIp = ((prevValue) => (value) => {\r\n        if (check.nonEmptyString(value) && prevValue !== value) {\r\n            prevValue = value\r\n            this.setState({ip: value})\r\n        }\r\n    })('')\r\n    setDefaultMask = ((prevValue) => (value) => {\r\n        if (check.integer(value) && prevValue !== value) {\r\n            prevValue = value\r\n            this.setState({mask: value})\r\n        }\r\n    })('')\r\n\r\n    // handleChangeIp = (e) => {\r\n    //     this.setState({ip: e.target.value})\r\n    // }\r\n    // handleChangeMask = (e) => {\r\n    //     this.setState({mask: e.target.value})\r\n    // }\r\n    handleChangeIp = (e) => {\r\n        this.setState({ip: e.target.value})\r\n    }\r\n    handleChangeMask = (e) => {\r\n        this.setState({mask: e.target.value})\r\n    }\r\n\r\n    // invokeListeners = () => {\r\n    //     let {onChange} = this.props\r\n    //     if (check.function(onChange)) {\r\n    //         onChange = [onChange]\r\n    //     }\r\n    //     if (check.not.array(onChange)) return\r\n    //     for (const subscriber of onChange) {\r\n    //         subscriber(Object.assign({}, this.state))\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        const clearMargin = this.props.clearMargin ? css.formGroupZeroMargin : undefined\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        const formControlIp = <FormControl\r\n            type=\"text\"\r\n            // value={this.state.ip}\r\n            value={this.props.ip}\r\n            placeholder={this.props.placeholder}\r\n            // onChange={this.handleChangeIp}\r\n            onChange={this.props.onChangeIp}\r\n            readOnly={this.props.readOnly}\r\n            disabled={this.props.disabled}\r\n            className={css.ip}\r\n        />\r\n        const formControlMask= <FormControl\r\n            type=\"text\"\r\n            // value={this.state.mask}\r\n            value={this.props.mask}\r\n            placeholder={this.props.placeholder}\r\n            // onChange={this.handleChangeMask}\r\n            onChange={this.props.onChangeMask}\r\n            readOnly={this.props.readOnly}\r\n            disabled={this.props.disabled}\r\n            className={css.mask}\r\n        />\r\n        return (\r\n            <Fragment>\r\n                <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                    {controlLabel}\r\n                    {formControlIp} / {formControlMask}\r\n                </FormGroup>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.setDefaultIp(this.props.ip)\r\n        // this.setDefaultMask(this.props.mask)\r\n        // this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        // this.setDefaultIp(this.props.ip)\r\n        // this.setDefaultMask(this.props.mask)\r\n        // this.invokeListeners()\r\n    }\r\n}\r\n\r\nIpAddressEdit.propTypes = {\r\n\r\n    label: PropTypes.string,\r\n    controlId: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    ip: PropTypes.string,\r\n    mask: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    onChangeIp: PropTypes.func,\r\n    onChangeMask: PropTypes.func,\r\n    clearMargin: PropTypes.bool\r\n}\r\nIpAddressEdit.defaultProps = {\r\n    label: '',\r\n    disabled: false,\r\n    clearMargin: true\r\n}\r\nexport default IpAddressEdit\r\n\r\n","import React, {PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport isEqual from 'lodash/isEqual'\r\nimport check from \"check-types\"\r\nimport Input2 from \"../Base/Input2\"\r\nimport Select from \"../Base/Select\"\r\nimport {Row, Col, Checkbox, Table, Button} from \"react-bootstrap\"\r\nimport IpAddressEdit from '../IpAddressEdit'\r\n\r\nclass Ports extends PureComponent {\r\n    state = {\r\n        ports: [],\r\n        ipEditMode: false,\r\n    }\r\n\r\n    setDefaultState = ((prevState) => (ports) => {\r\n        if (check.not.array(ports) || ports.length === 0) return\r\n        const portsCopy = cloneDeep(ports)\r\n        const newState = portsCopy.map((port) => {\r\n            return {...port, port_mask_len: (port.port_mask_len === null ? '' : port.port_mask_len)}\r\n        })\r\n        if (isEqual(prevState, newState)) return\r\n\r\n        prevState = newState\r\n        this.setState({ports: newState})\r\n    })([])\r\n\r\n    ipFormat = (value) => {\r\n        const reg = new RegExp('^[0-9.]*$')\r\n        return reg.test(value)\r\n    }\r\n    numericFormat = (value) => {\r\n        const reg = new RegExp('^[0-9]*$')\r\n        return reg.test(value)\r\n    }\r\n    macAddressFormat = (value) => {\r\n        const reg = new RegExp('^[0-9a-fA-F:]*$')\r\n        return reg.test(value)\r\n    }\r\n\r\n    handlerOnChangeCheckbox = (index) => () => {\r\n        this.setState({ports: this.state.ports.map((port, idx) => {return idx === index ? {...port, port_is_mng: !port.port_is_mng} : {...port, port_is_mng: false}})})\r\n    }\r\n    onChangeIp = (index) => (e) => {\r\n        if (!(this.ipFormat(e.target.value))) return\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_ip = e.target.value\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n    onChangeMask = (index) => (e) => {\r\n        if (!(this.numericFormat(e.target.value))) return\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_mask_len = e.target.value\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n    onChangePortName = (index) => (e) => {\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_details.portName = e.target.value\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n    onChangePortMac = (index) => (e) => {\r\n        if (!(this.macAddressFormat(e.target.value))) return\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_mac = e.target.value\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n    onChangePortDescription = (index) => (e) => {\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_details.description = e.target.value\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n    onChangeVrf = (index) => ({value}) => {\r\n        const [vrf] = this.props.vrfData.filter((item) => {return item.vrf_id === value})\r\n        // return\r\n        if (this.state.ports && this.state.ports[index]) {\r\n            const newPorts = cloneDeep(this.state.ports)\r\n            newPorts[index].port_vrf_id = value\r\n            newPorts[index].port_vrf_name = vrf.vrf_name\r\n            this.setState({ports: newPorts})\r\n        }\r\n    }\r\n\r\n    invokeListeners = ((prevState) => () => {\r\n        if (isEqual(prevState, this.state)) return\r\n        prevState = cloneDeep(this.state)\r\n\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    })({})\r\n    vrfList = ((prevVrfData, prevList) => () => {\r\n        const {vrfData} = this.props\r\n        if (JSON.stringify(prevVrfData) === JSON.stringify(vrfData))  return prevList\r\n        if (check.not.array(vrfData)) return prevList\r\n        prevVrfData = vrfData\r\n        prevList = vrfData.map((vrf) => {\r\n            return {value: vrf.vrf_id, label: vrf.vrf_name}\r\n        })\r\n        return prevList\r\n    })([], [])\r\n    vrfName = (vrfId) => {\r\n        if (vrfId === null || vrfId === undefined) return ''\r\n        const vrfData = this.props.vrfData || []\r\n        const [vrf] = vrfData.filter((vrf) => {\r\n            return vrf && vrf.vrf_id && vrf.vrf_id === vrfId\r\n        })\r\n        return vrf.vrf_name || ''\r\n    }\r\n    // vrfList = () => [{value: 1, label: 'global'}, {value: 2, label: 'global2'}]\r\n    newPort = () => {\r\n        const vrfList = this.vrfList()\r\n        const vrf_id = vrfList[0] ? vrfList[0].value : null\r\n        return {\r\n            port_id: null,\r\n            port_ip: '0.0.0.0',\r\n            port_comment: '',\r\n            port_details: {\r\n                portName: '',\r\n                description: ''\r\n            },\r\n            port_is_mng: false,\r\n            port_mac: '00:00:00:00:00:00',\r\n            port_mask_len: '',\r\n            port_vrf_id: vrf_id,\r\n            // port_vrf_name: vrf_name,\r\n            newPort: true,\r\n            deleted: false\r\n        }\r\n    }\r\n    onClickAddPort = () => {\r\n        const updatedPorts = cloneDeep(this.state.ports)\r\n        if (check.not.array(updatedPorts)) return\r\n        updatedPorts.push(this.newPort())\r\n        this.setState({ports: updatedPorts})\r\n    }\r\n    onClickDelPort = (index) => () => {\r\n        const updatedPorts = cloneDeep(this.state.ports)\r\n        if (check.not.array(updatedPorts)) return\r\n        updatedPorts[index].deleted = true\r\n        this.setState({ports: updatedPorts})\r\n    }\r\n\r\n\r\n    portsSet = () => {\r\n        const data = this.state.ports\r\n        if (check.not.array(data)) return\r\n        const createdPorts = []\r\n        const existedPorts = []\r\n        const defaultVrf = this.vrfList()[0] ? this.vrfList()[0].value : ''\r\n        data.forEach((port, index) => {\r\n            let {port_ip, port_mac, port_mask_len, port_is_mng, port_details, port_vrf_id, newPort, deleted} = port\r\n            if (!newPort) {\r\n                const ipCell = port_is_mng ?\r\n                    <IpAddressEdit ip={port_ip} mask={port_mask_len } onChangeIp={this.onChangeIp(index)} onChangeMask={this.onChangeMask(index)} /> :\r\n                    (port_mask_len === '' ? `${port_ip}`: `${port_ip}/${port_mask_len}`)\r\n                existedPorts.push(\r\n                    <tr key={index}>\r\n                        <td>{index + 1}</td>\r\n                        <td>{port_details && port_details.portName}</td>\r\n                        <td>{this.vrfName(port_vrf_id)}</td>\r\n                        <td>{ipCell}</td>\r\n                        <td>{port_mac}</td>\r\n                        <td>{port_details && port_details.description}</td>\r\n                        <td align=\"center\" valign=\"middle\">\r\n                            <Checkbox title=\"management interface\" onChange={this.handlerOnChangeCheckbox(index)} checked={port_is_mng} style={{marginTop: 0, marginBottom: 0}}/>\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            } else {\r\n                if (deleted) return\r\n                const ipCell = <IpAddressEdit ip={port_ip} mask={port_mask_len } onChangeIp={this.onChangeIp(index)} onChangeMask={this.onChangeMask(index)} />\r\n                createdPorts.push(\r\n                    <tr key={index}>\r\n                        <td><Button bsStyle=\"danger\" bsSize=\"xsmall\" onClick={this.onClickDelPort(index)}>Delete</Button></td>\r\n                        <td><Input2 customSize clearMargin value={port_details && port_details.portName} onChange={this.onChangePortName(index)} /></td>\r\n                        <td><Select optionList={this.vrfList()} defaultSelected={defaultVrf} onChange={this.onChangeVrf(index)} isAsync={false} emptyOption={false} clearMargin smallSize /></td>\r\n                        <td>{ipCell}</td>\r\n                        <td><Input2 customSize clearMargin value={port_mac} onChange={this.onChangePortMac(index)} /></td>\r\n                        <td><Input2 customSize clearMargin value={port_details && port_details.description} onChange={this.onChangePortDescription(index)} /></td>\r\n                        <td align=\"center\" valign=\"middle\">\r\n                            <Checkbox title=\"management interface\" onChange={this.handlerOnChangeCheckbox(index)} checked={port_is_mng} style={{marginTop: 0, marginBottom: 0}}/>\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            }\r\n        })\r\n        return [...createdPorts.reverse(), ...existedPorts]\r\n    }\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Col md={12}>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <Button bsStyle=\"primary\" bsSize=\"small\" style={{marginBottom: '1em'}} onClick={this.onClickAddPort}>Add port</Button>\r\n                        <Table responsive bordered striped condensed style={{\"tableLayout\": \"fixed\"}}  >\r\n                            <thead>\r\n                            <tr>\r\n                                <th className=\"col-xs-1 text-center\">#</th>\r\n                                <th className=\"col-xs-2 text-center\" align=\"middle\">Имя порта</th>\r\n                                <th className=\"col-xs-1 text-center\" align=\"middle\">VRF</th>\r\n                                <th className=\"col-xs-2 text-center\" align=\"middle\">IP</th>\r\n                                <th className=\"col-xs-2 text-center\" align=\"middle\">MAC</th>\r\n                                <th className=\"col-xs-3 text-center\" align=\"middle\">Комментарий</th>\r\n                                <th className=\"col-xs-1 text-center\" align=\"middle\">Management</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {this.portsSet()}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultState(this.props.data)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.setDefaultState(this.props.data)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nPorts.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.shape({\r\n        port_id: PropTypes.number,\r\n        port_is_mng: PropTypes.bool,\r\n        port_ip: PropTypes.string,\r\n        port_mac: PropTypes.string,\r\n        port_mask_len: PropTypes.number,\r\n        port_details: PropTypes.shape({\r\n            portName: PropTypes.string,\r\n            description: PropTypes.string,\r\n        }),\r\n        port_comment: PropTypes.string,\r\n        port_vrf_id: PropTypes.number,\r\n    })),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    vrfData: PropTypes.arrayOf(PropTypes.shape({\r\n        vrf_id: PropTypes.number,\r\n        vrf_name: PropTypes.string,\r\n        vrf_rd: PropTypes.string,\r\n        vrf_comment: PropTypes.string,\r\n    }))\r\n}\r\n\r\nexport default Ports\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Table} from 'react-bootstrap'\r\nimport EditableTag from \"../Base/EditableTag\"\r\nimport Select from \"../Base/Select\"\r\n\r\nclass DevLocation extends PureComponent {\r\n    pStyle = {\r\n        margin:0,\r\n        padding: '6px 3px'\r\n    }\r\n\r\n    render() {\r\n        const {onChange, floor, row, rack, unit, rackSide} = this.props\r\n        const rackSideOptions = [{value: \"Front\", label: \"Front\"}, {value: \"Back\", label: \"Back\"}]\r\n        return (\r\n            <Table responsive bordered condensed style={{\"tableLayout\": \"fixed\"}}  >\r\n                <thead>\r\n                <tr>\r\n                    <th className=\"col-xs-2 text-center\" align=\"middle\">Этаж</th>\r\n                    <th className=\"col-xs-2 text-center\" align=\"middle\">Ряд</th>\r\n                    <th className=\"col-xs-2 text-center\" align=\"middle\">Стойка</th>\r\n                    <th className=\"col-xs-2 text-center\" align=\"middle\">Unit</th>\r\n                    <th className=\"col-xs-3 text-center\" align=\"middle\">Сторона стойки</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td><EditableTag disabled={false} tagName='p' value={floor} onChange={onChange('floor')} style={this.pStyle} /></td>\r\n                        <td><EditableTag disabled={false} tagName='p' value={row} onChange={onChange('row')} style={this.pStyle} /></td>\r\n                        <td><EditableTag disabled={false} tagName='p' value={rack} onChange={onChange('rack')} style={this.pStyle} /></td>\r\n                        <td><EditableTag disabled={false} tagName='p' value={unit} onChange={onChange('unit')} style={this.pStyle} /></td>\r\n                        <td><Select style={{marginBottom: 0}} isAsync={false} optionList={rackSideOptions} defaultSelected={rackSide} onChange={onChange('rackSide')} /></td>\r\n                    </tr>\r\n\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n\r\nDevLocation.propTypes = {\r\n    floor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    row: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    rack: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    unit: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    rackSide: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n}\r\nDevLocation.defaultProps = {\r\n    floor: '',\r\n    row: '',\r\n    rack: '',\r\n    unit: '',\r\n    rackSide: ''\r\n}\r\n\r\nexport default DevLocation\r\n","import React, {Fragment, Component} from 'react'\r\nimport check from 'check-types'\r\nimport custCss from './style.module.css'\r\nimport axios from 'axios'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport isEqual from 'lodash/isEqual'\r\nimport {Row, Col, Button, Modal, ModalBody, ModalFooter, ModalHeader, } from 'react-bootstrap'\r\nimport Office from '../components/Office'\r\nimport Region from '../components/Region'\r\nimport City from '../components/City'\r\nimport DevType from '../components/DevType'\r\nimport Platform from '../components/Platform'\r\nimport Software from '../components/Software'\r\nimport Input from '../components/Base/Input'\r\nimport Input2 from '../components/Base/Input2'\r\nimport TextArea from '../components/Base/TextArea'\r\nimport TextArea2 from '../components/Base/TextArea2'\r\nimport CheckBox from '../components/Base/CheckBox'\r\nimport Modules from '../components/Modules'\r\nimport Ports from '../components/Ports'\r\nimport DevLocation from '../components/DevLocation'\r\nimport {DEV_DATA_URL, DEV_LOCATION_URL, DEV_MODULES_DATA_URL, DEV_PORTS_DATA_URL, DEV_SUBMIT_URL, VRF_LIST_URL} from'../constants'\r\n\r\nclass EditDevWindow extends Component {\r\n    // constructor(props, context) {\r\n    //     super(props, context);\r\n    //     // this.handleShow = this.handleShow.bind(this);\r\n    //     // this.handleClose = this.handleClose.bind(this);\r\n    // }\r\n     /**\r\n      * @typedef {{\r\n      *      floor: (number|string),\r\n      *      row: (number|string),\r\n      *      rack: (number|string),\r\n      *      unit: (number|string),\r\n      *      rackSide: string\r\n      * }} Site\r\n      *\r\n      * @typedef {{\r\n      *      hostname: string,\r\n      *      site: Site\r\n      * }} DevDetails\r\n      *\r\n      * @typedef {{\r\n      *     dev_id: number,\r\n      *     location_id: number,\r\n      *     platform_id: number,\r\n      *     platform_item_id: number,\r\n      *     software_id: number,\r\n      *     software_item_id: number,\r\n      *     vendor_id: number,\r\n      *     dev_type_id: number,\r\n      *     dev_comment: string,\r\n      *     software_item_comment: string,\r\n      *     dev_last_update: string,\r\n      *     dev_in_use: boolean,\r\n      *     platform_item_sn: string,\r\n      *     platform_item_sn_alt: string,\r\n      *     is_hw: boolean,\r\n      *     software_item_ver: string,\r\n      *     dev_details: (DevDetails|object),\r\n      *     software_item_details: object\r\n      * }} DevInfo\r\n      *\r\n      * @typedef {{\r\n      *     module: string,\r\n      *     module_id: number,\r\n      *     module_item_id: number,\r\n      *     module_item_details: object,\r\n      *     module_item_comment: string,\r\n      *     module_item_sn: string,\r\n      *     module_item_in_use: boolean,\r\n      *     module_item_not_found: boolean\r\n      *     module_item_last_update: string\r\n      * }} Module\r\n      *\r\n      * @typedef {{\r\n      *     description: string,\r\n      *     portName: string\r\n      * }} PortDetails\r\n      *\r\n      * @typedef {{\r\n      *     port_id: number,\r\n      *     port_type_id: number,\r\n      *     port_ip: string,\r\n      *     port_comment: string,\r\n      *     port_details: PortDetails,\r\n      *     port_is_mng: boolean,\r\n      *     port_mac: string,\r\n      *     port_mask_len: (string|number),\r\n      *     port_type: string,\r\n      *     port_last_update: string,\r\n      *     port_net_id: number,\r\n      *     port_vrf_id: number,\r\n      *     newPort: boolean // for created ports is true\r\n      *     deleted: boolean // for deleted ports is true\r\n      * }} Port\r\n      *\r\n      * @typedef {{\r\n      *     region_id: number,\r\n      *     city_id: number,\r\n      *     office_id: number\r\n      *     office_comment\r\n      * }} GeoLocation\r\n      *\r\n      * @typedef {{\r\n      *     accessor: string,\r\n      *     statement: string,\r\n      *     value: (string|number)\r\n      * }} Filter\r\n      *\r\n      * @typedef {{\r\n      *     vrf_id: number,\r\n      *     vrf_name: string,\r\n      *     vrf_rd: string\r\n      *     vrf_comment: string\r\n      * }} Vrf\r\n      */\r\n\r\n      /**\r\n      * @type {{\r\n      *     show: boolean,\r\n      *     devId: (number|string),\r\n      *     devDataLoading: boolean,\r\n      *     devDataReady: boolean,\r\n       *     mngPorts: array\r\n      * }} state\r\n      */\r\n    state = {\r\n        show: false,\r\n        devId: '',\r\n        devDataLoading: false,\r\n        devDataReady: false,\r\n        mngIp: '',\r\n        officeComment: '',\r\n        loadingOfficeData: false,\r\n        officeDataInvalidate: true,\r\n        saving: false,\r\n        region_id: '',\r\n        city_id: '',\r\n    }\r\n    clearState = ((initialState) => () => {\r\n        this.setState(cloneDeep(initialState))\r\n    })(this.state)\r\n    /**\r\n     * @type {{\r\n     *    geoLocation: (GeoLocation|object),\r\n     *     devInfo: (DevInfo|object),\r\n     *     modules: (Module[]|Array),\r\n     *     ports: (Port[]|Array)\r\n     * }} initialData\r\n     */\r\n    initialData = {\r\n        geoLocation: {},\r\n        devInfo: {},\r\n        modules: [],\r\n        ports: [],\r\n    }\r\n    clearInitialData = ((initialState) => () => {\r\n        this.initialData = cloneDeep(initialState)\r\n    })(this.initialData)\r\n\r\n    /**\r\n     * @type {{\r\n     *     geoLocation: (GeoLocation|object),\r\n     *     devInfo: (DevInfo|object),\r\n     *     modules: (Module[]|Array),\r\n     *     ports: (Port[]|Array),\r\n     * }} currentState\r\n     */\r\n    currentState = {\r\n        geoLocation: {},\r\n        devInfo: {},\r\n        modules: [],\r\n        ports: [],\r\n    }\r\n    clearCurrentState = ((initialState) => () => {\r\n        this.currentState = cloneDeep(initialState)\r\n    })(this.currentState)\r\n\r\n    /**\r\n     * @type Filter cityFilter\r\n     */\r\n    cityFilter = {\r\n        accessor: 'region_id',\r\n        statement: '=',\r\n        value: ''\r\n    }\r\n    clearCityFilter = ((initialState) => () => {\r\n        this.cityFilter = cloneDeep(initialState)\r\n    })(this.cityFilter)\r\n    /**\r\n     * @type Filter officeFilter\r\n     */\r\n    officeFilter = {\r\n        accessor: 'city_id',\r\n        statement: '=',\r\n        value: ''\r\n    }\r\n    clearOfficeFilter = ((initialState) => () => {\r\n        this.officeFilter = cloneDeep(initialState)\r\n    })(this.officeFilter)\r\n    /**\r\n     *\r\n     * @type Site siteInfo\r\n     */\r\n    siteInfo = {\r\n        floor: '',\r\n        row: '',\r\n        rack: '',\r\n        unit: '',\r\n        rackSide: '',\r\n    }\r\n    clearSiteInfo = ((initialState) => () => {\r\n        this.siteInfo = cloneDeep(initialState)\r\n    })(this.siteInfo)\r\n\r\n    clearFormData = () => {\r\n        this.clearInitialData()\r\n        this.clearCurrentState()\r\n        this.clearOfficeFilter()\r\n        this.clearCityFilter()\r\n        this.clearSiteInfo()\r\n        this.clearState()\r\n    }\r\n    /**\r\n     *\r\n     * @type (Vrf[]|Array)\r\n     */\r\n    vrfList = []\r\n    getDevLocation = async (location_id) => {\r\n        try {\r\n            const res = await axios.get(DEV_LOCATION_URL, {\r\n                params: {location_id: location_id}\r\n            })\r\n            const {data} = res\r\n            if (!data.location) {\r\n                console.log('ERROR: getDevLocation for loc_id ', data, location_id)\r\n                return {}\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: getDevLocation', e.toString())\r\n            return {}\r\n        }\r\n    }\r\n\r\n    managingIp = (portsInfo) => {\r\n        if (!check.array(portsInfo)) return\r\n        const res = portsInfo.filter((port) => port.port_is_mng).map((port) => port.port_ip)\r\n        return res.join(', ')\r\n    }\r\n    handleShow = () => {\r\n        this.setState({ show: true });\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.clearFormData()\r\n        // this.setState({ show: false });\r\n    }\r\n    dataValidate = (devData) => {\r\n        const errors = []\r\n        if (check.not.number(devData.geoLocation.office_id)) errors.push('Не указан оффис')\r\n        return errors\r\n    }\r\n    handleSubmit = async() => {\r\n        const errors = this.dataValidate(this.currentState)\r\n        // console.log('save', this.currentState)\r\n        if (check.nonEmptyArray(errors)) {\r\n            alert(errors.join(\"\\n\"))\r\n            return\r\n        }\r\n        try {\r\n            this.setState({saving: true})\r\n            // console.log('currentState', this.currentState)\r\n            /**\r\n             * @typedef {{\r\n             *     code: number,\r\n             *     message: string\r\n             * }} Error\r\n             * @type {{\r\n             *     errors: Error[]\r\n             * }} res\r\n             */\r\n            const res = await axios.post(DEV_SUBMIT_URL, this.currentState)\r\n            const {data} = res\r\n            if (data.errors) throw data.errors.join(\"\\n\")\r\n            this.setState({saving: false})\r\n            console.log('SAVE RESULT', data.result)\r\n            if (window.updateDevTable) {\r\n                window.updateDevTable()\r\n            } else {\r\n                console.log('function updateDevTable not found')\r\n            }\r\n            setTimeout(() => {this.handleClose()}, 700)\r\n        } catch (e) {\r\n            console.log('ERROR: ', e)\r\n            alert(e)\r\n            this.setState({saving: false})\r\n        }\r\n    }\r\n\r\n    onChangeGeoLocation = (key) => async ({value}) => {\r\n        const {geoLocation} = this.currentState\r\n        geoLocation[key] = value\r\n        if (key === 'region_id' || key === 'city_id') {\r\n            this.setState({[key]: value})\r\n        }\r\n        if (key === 'office_id') {\r\n            this.onChangeDevInfo('location_id')({value})\r\n            if (check.emptyString(value)) {\r\n                const {geoLocation} = this.currentState\r\n                geoLocation.office_comment = ''\r\n                this.setState({officeDataInvalidate: true, officeComment: ''})\r\n            } else {\r\n                this.setState({officeDataInvalidate: true, loadingOfficeData: true})\r\n                const res = await this.getDevLocation(value)\r\n                const {location = {}} = res\r\n                let {office_comment} = location\r\n                office_comment = office_comment ? office_comment : ''\r\n                const {geoLocation} = this.currentState\r\n                geoLocation.office_comment = office_comment\r\n                this.setState({officeComment: office_comment, officeDataInvalidate: false,loadingOfficeData: false})\r\n            }\r\n\r\n        }\r\n    }\r\n    onChangeOfficeComment = (e) => {\r\n        const {geoLocation} = this.currentState\r\n        geoLocation.office_comment = e.target.value\r\n        this.setState({officeComment: e.target.value})\r\n    }\r\n    onChangeDevInfo = (key) => ({value}) => {\r\n        const {devInfo} = this.currentState\r\n        devInfo[key] = value\r\n    }\r\n    onChangeDevDetails = (key) => ({value}) => {\r\n        const {devInfo} = this.currentState\r\n        if (! devInfo.dev_details) devInfo.dev_details = {}\r\n        devInfo.dev_details[key] = value\r\n    }\r\n    onChangeModule = (key) => (idx) => ({value}) => {\r\n        const {modules} = this.currentState\r\n        if (modules[idx] && modules[idx][key] !== value) {\r\n            modules[idx][key] = value\r\n        }\r\n    }\r\n    changeMngIpString = (ports) => {\r\n        if (!check.array(ports)) return\r\n        const res = ports.filter((port) => port.port_is_mng && !port.deleted).map((port) => port.port_ip)\r\n        let mngIp = res.join(', ')\r\n        if (this.state.mngIp !== mngIp) this.setState({mngIp})\r\n        // if (res.length > 0) {\r\n        //     this.setState({mngIp:res.join(', ') })\r\n        // }\r\n    }\r\n    onChangePorts = ({ports}) => {\r\n        ports = ports.map((port) => {\r\n            return {...port, port_mask_len: port.port_mask_len === '' ? null : parseInt(port.port_mask_len)}\r\n        })\r\n        this.currentState.ports = ports\r\n        this.changeMngIpString(this.currentState.ports)\r\n    }\r\n    onChangeDevLocation = (key) => ({value}) => {\r\n        if (value === undefined || !this.state.devDataReady) return\r\n        const {devInfo} = this.currentState\r\n        if (!devInfo)  {\r\n            return\r\n        }\r\n        if (!devInfo.dev_details) devInfo.dev_details = {}\r\n        if ( !devInfo.dev_details.site) {\r\n            devInfo.dev_details.site = this.siteInfo\r\n        }\r\n        devInfo.dev_details.site[key] = value\r\n    }\r\n\r\n    fetchDeviceData = async (id) => {\r\n        try {\r\n            const res = await axios.get(DEV_DATA_URL, {\r\n                params: {id}\r\n            })\r\n            const {data} = res\r\n            if (!data.devInfo) {\r\n                console.log('ERROR: fetchDeviceData')\r\n                return {}\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: fetchDeviceData', e.toString())\r\n            return {}\r\n        }\r\n    }\r\n    fetchDevModulesData = async (id) => {\r\n        try {\r\n            const res = await axios.get(DEV_MODULES_DATA_URL, {\r\n                params: {id}\r\n            })\r\n            const {data} = res\r\n            if (!data.modules) {\r\n                console.log('ERROR: fetchDevModulesData')\r\n                return []\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: fetchDevModulesData', e.toString())\r\n            return []\r\n        }\r\n    }\r\n    fetchDevPortsData = async (id) => {\r\n        try {\r\n            const res = await axios.get(DEV_PORTS_DATA_URL, {\r\n                params: {id}\r\n            })\r\n            const {data} = res\r\n            if (!data.ports) {\r\n                console.log('ERROR: fetchDevPortsData')\r\n                return []\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: fetchDevPortsData', e.toString())\r\n            return []\r\n        }\r\n    }\r\n    fetchVrfList = async () => {\r\n        try {\r\n            const res = await axios.get(VRF_LIST_URL, {\r\n                params: {}\r\n            })\r\n            const {data} = res\r\n            if (!data.vrfList) {\r\n                console.log('ERROR: fetchVrfList')\r\n                return []\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: fetchVrfList', e.toString())\r\n            return []\r\n        }\r\n    }\r\n\r\n    memoizedCityFilter = ((prevFilter) => () => {\r\n        const newCityFilter = Object.assign({}, this.cityFilter, {value: this.state.region_id})\r\n        if (!isEqual(newCityFilter, prevFilter)) prevFilter = newCityFilter\r\n        return [prevFilter]\r\n    })([])\r\n\r\n    memoizedOfficeFilter = ((prevFilter) => () => {\r\n        const newCityFilter = Object.assign({}, this.cityFilter, {value: this.state.region_id})\r\n        const newOfficeFilter = Object.assign({}, this.officeFilter, {value: this.state.city_id})\r\n        const newFilter = [newCityFilter, newOfficeFilter]\r\n        if (!isEqual(prevFilter, newFilter)) prevFilter = newFilter\r\n        return prevFilter\r\n    })([])\r\n\r\n    render() {\r\n        const {devDataReady} = this.state\r\n        const {geoLocation, devInfo, modules, ports} = this.initialData\r\n        const devSite = (() => {\r\n            const {floor, row, rack, unit, rackSide} = devInfo && devInfo.dev_details && devInfo.dev_details.site ? devInfo.dev_details.site : {}\r\n            return {floor, row, rack, unit, rackSide}\r\n        })()\r\n        const modalBody = () => {\r\n            if (!this.state.show) return null\r\n            if (!this.state.devDataReady) return <h3 align=\"center\">Загрузка данных...</h3>\r\n            return (\r\n                <Fragment>\r\n                    <Row>\r\n                        <Col md={2}><Region onChange={this.onChangeGeoLocation('region_id')} defaultSelected={geoLocation.region_id} disabled={!devDataReady}/></Col>\r\n                        <Col md={2}><City onChange={this.onChangeGeoLocation('city_id')} defaultSelected={geoLocation.city_id} filter={this.memoizedCityFilter()} disabled={!devDataReady}/></Col>\r\n                        <Col md={4}><Office onChange={this.onChangeGeoLocation('office_id')} defaultSelected={geoLocation.office_id} filter={this.memoizedOfficeFilter()} disabled={!devDataReady}/></Col>\r\n                        <Col md={4}><TextArea2 controlId=\"officeComment\" disabled={this.state.officeDataInvalidate || !devDataReady} onChange={this.onChangeOfficeComment} placeholder='Комментарий к офису' value={this.state.officeComment} label=\"Комментарий к оффису\" /></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={3}><DevType onChange={this.onChangeDevInfo('dev_type_id')} defaultSelected={devInfo.dev_type_id} /></Col>\r\n                        <Col md={3}><Platform onChange={this.onChangeDevInfo('platform_id')} defaultSelected={devInfo.platform_id}/></Col>\r\n                        <Col md={3}><Software onChange={this.onChangeDevInfo('software_id')}  defaultSelected={devInfo.software_id} /></Col>\r\n                        <Col md={3}><Input controlId='swVer' onChange={this.onChangeDevInfo('software_item_ver')} defaultValue={devInfo.software_item_ver} label=\"Версия ПО\"/></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={3}><Input controlId='devSn' addOnPosition=\"left\" addOnText=\"SN\" onChange={this.onChangeDevInfo('platform_item_sn')} defaultValue={devInfo.platform_item_sn} label=\" \" readOnly/></Col>\r\n                        <Col md={3}><Input controlId='devAltSn' addOnPosition=\"left\" addOnText=\"alt SN\" onChange={this.onChangeDevInfo('platform_item_sn_alt')} defaultValue={devInfo.platform_item_sn_alt} label=\" \" /></Col>\r\n                        <Col md={3}><Input controlId='hostname' addOnPosition=\"left\" addOnText=\"hostname\" onChange={this.onChangeDevDetails('hostname')} defaultValue={devInfo.dev_details && devInfo.dev_details.hostname} label=\" \" /></Col>\r\n                        <Col md={3}><Input2 readOnly controlId='managementIP' addOnPosition=\"left\" addOnText=\"management IP\" onChange={()=>{}} label=\" \" value={this.state.mngIp} /></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={6}><TextArea controlId=\"deviceComment\" onChange={this.onChangeDevInfo('dev_comment')} placeholder='Комментарий к устройству' defaultValue={devInfo.dev_comment} label=\"Коментарий к устройству\" /></Col>\r\n                    </Row>\r\n                    <Row><Col md={6}><CheckBox title=\"Устройство используется\" onChange={this.onChangeDevInfo('dev_in_use')} checked={devInfo.dev_in_use} >Устройство используется</CheckBox></Col></Row>\r\n                    <Row>\r\n                        <Col md={10}><Modules data={modules} onChange={this.onChangeModule} /></Col>\r\n                    </Row>\r\n                    <Ports data={ports} vrfData={this.vrfList} onChange={this.onChangePorts} />\r\n                    <Row>\r\n                        <Col md={10}>\r\n                            <DevLocation {...devSite} onChange={this.onChangeDevLocation} />\r\n                        </Col>\r\n                    </Row>\r\n                </Fragment>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Modal show={this.state.show} onHide={this.handleClose} bsSize=\"large\" >\r\n                <ModalHeader closeButton>\r\n                    <Modal.Title>Редактирование устройства</Modal.Title>\r\n                </ModalHeader>\r\n                <ModalBody className={custCss.modalBody} >\r\n                    {modalBody()}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Row>\r\n                        <Col md={8}>\r\n                            <h3 align=\"center\" style={{margin: 0}}>{this.state.saving ? 'Сохранение данных...' : ''}</h3>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Button onClick={this.handleClose} bsStyle=\"danger\" disabled={this.state.saving} >Отмена</Button>\r\n                            <Button onClick={this.handleSubmit} bsStyle=\"success\" disabled={this.state.saving}>Сохранить</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n    async componentDidMount() {\r\n        window.openEditModal = (id) => {\r\n            this.setState({\r\n                show: true,\r\n                devId: id,\r\n                devDataReady: false\r\n            })\r\n        }\r\n        window.openCreateNewDevModal = () => {\r\n            this.setState({\r\n                show: true,\r\n                devId: '',\r\n                devDataReady: false,\r\n                newDev: true\r\n            })\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate() {\r\n        const {devId, devDataReady, devDataLoading} = this.state\r\n        if (devId && !devDataReady && !devDataLoading) {\r\n            this.setState({devDataLoading: true})\r\n            // const devData = await this.fetchDeviceData(this.state.devId)\r\n            try {\r\n                const response1 = await Promise.all([\r\n                    this.fetchDeviceData(devId),\r\n                    this.fetchDevModulesData(devId),\r\n                    this.fetchDevPortsData(devId),\r\n                    this.fetchVrfList()\r\n                ])\r\n                const [{devInfo}, {modules}, {ports}, {vrfList}] = response1\r\n                let geoLocation = {}\r\n                if (devInfo && devInfo.location_id) {\r\n                    const response2 = await this.getDevLocation(devInfo.location_id)\r\n                    const {location = {}} = response2\r\n                    geoLocation = (({office_id, city_id, region_id, office_comment}) => {return {office_id, city_id, region_id, office_comment}})(location)\r\n                }\r\n                this.initialData = {...this.initialData, devInfo, modules, ports, geoLocation}\r\n                this.vrfList = vrfList\r\n                this.currentState = {\r\n                    geoLocation: cloneDeep(geoLocation),\r\n                    devInfo: cloneDeep(devInfo),\r\n                    modules: cloneDeep(modules),\r\n                    ports: cloneDeep(ports),\r\n                }\r\n                this.setState({devDataLoading: false, devDataReady: true})\r\n            } catch (e) {\r\n                console.log('Loading dev data ERROR', e.toString())\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default EditDevWindow\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport EditDevWindow from './EditDevWindow';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<EditDevWindow />, document.getElementById('injectReact'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroupZeroMargin\":\"style_formGroupZeroMargin__1ocN6\",\"indents\":\"style_indents__CXmar\",\"ip\":\"style_ip__7oCzC style_indents__CXmar\",\"mask\":\"style_mask__1pKCo style_indents__CXmar\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroupZeroMargin\":\"style_formGroupZeroMargin__1CpZ5\",\"indents\":\"style_indents__2Irpo\",\"size\":\"style_size__QK4yj style_indents__2Irpo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroupZeroMargin\":\"style_formGroupZeroMargin__1eXLG\",\"indents\":\"style_indents__2-inD\",\"size\":\"style_size__2OfcW style_indents__2-inD\"};"],"sourceRoot":""}