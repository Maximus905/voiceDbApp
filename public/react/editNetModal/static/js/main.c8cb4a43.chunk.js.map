{"version":3,"sources":["EditNetWindow/style.module.css","components/Base/Input/style.module.css","components/Base/Input/index.js","components/Base/Input2/index.js","components/Base/TextArea/index.js","components/Base/TextArea2/index.js","components/Base/CheckBox/index.js","components/Base/Select/index.js","constants.js","EditNetWindow/index.js","serviceWorker.js","index.js","components/Base/Input2/style.module.css","components/Base/Select/style.module.css"],"names":["module","exports","modalBody","formGroupZeroMargin","Input","prevValue","state","value","setDefaultValue","check","string","number","_this","setState","handleChange","e","target","invokeListeners","onChange","props","function","not","array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","subscriber","Object","assign","err","return","clearMargin","this","custCss","_this$props","addOnPosition","addOnText","controlLabel","emptyString","label","react_default","a","createElement","ControlLabel","formControl","FormControl","type","placeholder","readOnly","disabled","style","nonEmptyString","leftAddOn","InputGroup","Addon","rightAddOn","react","FormGroup","controlId","bsClass","defaultValue","PureComponent","defaultProps","Input2","css","className","customSize","size","TextArea","componentClass","TextArea2","CheckBox","prevState","checked","handleOnChange","Checkbox","title","children","Select","prevFilter","isLoading","optionsInvalidate","optionList","setDefaultSelected","filter","item","length","parseInt","isNaN","toString","defaultSelectedValue","checkSelected","checkFilter","isEqual","JSON","stringify","cloneDeep","buildOptionList","emptyOption","emptyValue","key","emptyLabel","optionsSet","map","_ref","concat","toConsumableArray","isAsync","updateRemoteOptionList","updateLocalOptionList","remoteDataFetch","remoteDataFetchDefault","data","console","log","_context2","t0","remoteSourceUrl","axios","post","_context3","smallSize","updateIfNeeded","defaultSelected","selected","BASE_URL","protocol","window","location","hostname","port","NET_DATA_URL","VRF_LIST_URL","NET_SUBMIT_URL","EditNetWindow","initialState","prevVrfData","prevList","show","newNet","netId","netIp","netComment","dataLoading","dataReady","saving","vrfId","vrfList","clearState","initialData","clearInitialData","currentState","clearCurrentState","vrfData","vrf","vrf_id","vrf_name","vrf_rd","vrf_comment","clearFormData","handleClose","dataValidate","errors","_this$state","push","editedNetData","_this$state2","handleSubmit","_callee","res","regenerator_default","wrap","_context","prev","nonEmptyArray","alert","join","abrupt","sent","result","updateNetTable","setTimeout","stop","fetchNetData","_callee2","get","params","netData","fetchVrfList","_callee3","ipFormat","RegExp","test","onChangeNetIp","onChangeNetComment","onChangeVrf","_ref4","_this2","Modal","onHide","bsSize","ModalHeader","closeButton","Title","ModalBody","Row","Col","md","Base_Input2","Base_Select","align","ModalFooter","margin","Button","onClick","bsStyle","openNetworkEditModal","_this3","openNewNetworkModal","reload","Promise","all","response1","vrfRawData","net_ip","net_comment","_context5","Component","Boolean","match","ReactDOM","render","src_EditNetWindow","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","indents"],"mappings":"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","file":"static/js/main.c8cb4a43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBody\":\"style_modalBody__2g3nX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroupZeroMargin\":\"style_formGroupZeroMargin__-9bm7\"};","import React, {PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport custCss from './style.module.css'\r\nimport {FormGroup, FormControl, ControlLabel, InputGroup} from 'react-bootstrap'\r\n\r\nclass Input extends PureComponent {\r\n    state = {\r\n        value: ''\r\n    }\r\n\r\n    setDefaultValue = ((prevValue) => (value) => {\r\n        if ((check.string(value) || check.number(value)) && prevValue !== value) {\r\n            prevValue = value\r\n            this.setState({value})\r\n        }\r\n    })('')\r\n\r\n    handleChange = (e) => {\r\n        this.setState({value: e.target.value})\r\n    }\r\n\r\n    invokeListeners = () => {\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const clearMargin = this.props.clearMargin ? custCss.formGroupZeroMargin : undefined\r\n        const {addOnPosition, addOnText} = this.props\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        const formControl = <FormControl\r\n            type=\"text\"\r\n            value={this.state.value}\r\n            placeholder={this.props.placeholder}\r\n            onChange={this.handleChange}\r\n            readOnly={this.props.readOnly}\r\n            disabled={this.props.disabled}\r\n            style={this.props.style}\r\n        />\r\n        if (addOnPosition && check.nonEmptyString(addOnText)) {\r\n            const leftAddOn = this.props.addOnPosition && this.props.addOnPosition === 'left' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            const rightAddOn = this.props.addOnPosition && this.props.addOnPosition === 'right' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        <InputGroup>\r\n                            {leftAddOn}\r\n                            {formControl}\r\n                            {rightAddOn}\r\n                        </InputGroup>\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        } else {\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        {formControl}\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nInput.propTypes = {\r\n    label: PropTypes.string,\r\n    controlId: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    defaultValue: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    addOnPosition: PropTypes.oneOf(['left', 'right']),\r\n    addOnText: PropTypes.string,\r\n    clearMargin: PropTypes.bool\r\n}\r\nInput.defaultProps = {\r\n    label: '',\r\n    disabled: false,\r\n}\r\nexport default Input\r\n\r\n","import React, {PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport css from './style.module.css'\r\nimport {FormGroup, FormControl, ControlLabel, InputGroup} from 'react-bootstrap'\r\n\r\nclass Input2 extends PureComponent {\r\n\r\n    render() {\r\n        const clearMargin = this.props.clearMargin ? css.formGroupZeroMargin : undefined\r\n        const {addOnPosition, addOnText} = this.props\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        const formControl = <FormControl\r\n            type=\"text\"\r\n            value={this.props.value}\r\n            placeholder={this.props.placeholder}\r\n            onChange={this.props.onChange}\r\n            readOnly={this.props.readOnly}\r\n            disabled={this.props.disabled}\r\n            className={this.props.customSize ? css.size : undefined}\r\n        />\r\n        if (addOnPosition && check.nonEmptyString(addOnText)) {\r\n            const leftAddOn = this.props.addOnPosition && this.props.addOnPosition === 'left' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            const rightAddOn = this.props.addOnPosition && this.props.addOnPosition === 'right' ? <InputGroup.Addon>{this.props.addOnText}</InputGroup.Addon> : null\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        <InputGroup>\r\n                            {leftAddOn}\r\n                            {formControl}\r\n                            {rightAddOn}\r\n                        </InputGroup>\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        } else {\r\n            return (\r\n                <Fragment>\r\n                    <FormGroup controlId={this.props.controlId} bsClass={clearMargin}>\r\n                        {controlLabel}\r\n                        {formControl}\r\n                    </FormGroup>\r\n                </Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n    componentDidUpdate() {\r\n    }\r\n}\r\n\r\nInput2.propTypes = {\r\n    customSize: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    controlId: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    value: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    addOnPosition: PropTypes.oneOf(['left', 'right']),\r\n    addOnText: PropTypes.string,\r\n    clearMargin: PropTypes.bool\r\n}\r\nInput2.defaultProps = {\r\n    disabled: false,\r\n    clearMargin: false\r\n}\r\nexport default Input2\r\n\r\n","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport {FormControl, FormGroup, ControlLabel} from 'react-bootstrap'\r\n\r\nclass TextArea extends PureComponent {\r\n    state = {\r\n        value: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({value: e.target.value})\r\n    }\r\n    invokeListeners = () => {\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    }\r\n    setDefaultValue = ((prevValue) => (value) => {\r\n        if (value === undefined || value === null) return\r\n        if (prevValue === value) return\r\n        prevValue = value\r\n        this.setState({value})\r\n        // if (check.nonEmptyString(value) && prevValue !== value) {\r\n        //     prevValue = value\r\n        //     this.setState({value})\r\n        // }\r\n    })('')\r\n\r\n    render() {\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        return (\r\n            <FormGroup controlId=\"formControlsTextarea\">\r\n                {controlLabel}\r\n                <FormControl componentClass=\"textarea\" placeholder={this.props.placeholder} onChange={this.handleChange} value={this.state.value} />\r\n            </FormGroup>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.defaultValue)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nTextArea.propTypes = {\r\n    label: PropTypes.string,\r\n    defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    controlId: PropTypes.string,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string\r\n}\r\nTextArea.defaultProps = {\r\n}\r\n\r\nexport default TextArea","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from 'check-types'\r\nimport {FormControl, FormGroup, ControlLabel} from 'react-bootstrap'\r\n\r\nclass TextArea2 extends PureComponent {\r\n\r\n    render() {\r\n        const controlLabel = check.not.emptyString(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        return (\r\n            <FormGroup controlId=\"formControlsTextarea\">\r\n                {controlLabel}\r\n                <FormControl componentClass=\"textarea\" placeholder={this.props.placeholder} onChange={this.props.onChange} value={this.props.value} disabled={this.props.disabled} />\r\n            </FormGroup>\r\n        )\r\n    }\r\n    componentDidMount() {}\r\n    componentDidUpdate() {}\r\n}\r\n\r\nTextArea2.propTypes = {\r\n    label: PropTypes.string,\r\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    controlId: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    readOnly: PropTypes.bool,\r\n    placeholder: PropTypes.string\r\n}\r\nTextArea2.defaultProps = {\r\n}\r\n\r\nexport default TextArea2","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport check from \"check-types\"\r\nimport {Checkbox} from \"react-bootstrap\"\r\n\r\nclass CheckBox extends PureComponent {\r\n    state = {\r\n        value: this.props.checked\r\n    }\r\n\r\n    handleOnChange = () => {\r\n        this.setState({value: !this.state.value})\r\n    }\r\n\r\n\r\n    setDefaultValue = ((prevState) => (value) => {\r\n        if (prevState !== value) {\r\n            prevState = value\r\n            this.setState({value})\r\n        }\r\n    })(this.props.checked)\r\n\r\n    invokeListeners = () => {\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        for (const subscriber of onChange) {\r\n            subscriber(Object.assign({}, this.state))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Checkbox title={this.props.title} onChange={this.handleOnChange} checked={this.state.value} disabled={this.props.disabled} style={this.props.style} >{this.props.children}</Checkbox>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDefaultValue(this.props.checked)\r\n        this.invokeListeners()\r\n    }\r\n    componentDidUpdate() {\r\n        this.setDefaultValue(this.props.checked)\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\nCheckBox.propTypes = {\r\n    checked: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    style: PropTypes.object,\r\n}\r\nCheckBox.defaultProps = {\r\n    disabled: false,\r\n    checked: false\r\n}\r\n\r\nexport default CheckBox\r\n","import React, { PureComponent, Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {FormControl, ControlLabel, FormGroup} from 'react-bootstrap'\r\nimport check from 'check-types'\r\nimport axios from \"axios\"\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport isEqual from 'lodash/isEqual'\r\nimport css from \"./style.module.css\"\r\n\r\nclass Select extends PureComponent {\r\n\r\n    state = {\r\n        value: '',\r\n        isLoading: false,\r\n        optionsInvalidate: true,\r\n    }\r\n    optionList = []\r\n\r\n    setDefaultSelected = ((prevValue) => (value) => {\r\n        if (value === undefined || value === null || this.state.optionsInvalidate || this.state.isLoading) return\r\n        if (prevValue === value) return\r\n        prevValue = value\r\n        if (this.optionList.filter((item) => item.value === value).length === 0) return\r\n        if (this.state.value === value) return\r\n        this.setState({value: prevValue})\r\n    })('')\r\n\r\n    handleChange = (e) => {\r\n        let value = parseInt(e.target.value)\r\n        if (!isNaN(value) && value.toString && value.toString() === e.target.value) {\r\n            this.setState({value})\r\n        }  else {\r\n            this.setState({value: e.target.value})\r\n        }\r\n    }\r\n    defaultSelectedValue = () => {\r\n        return this.optionList.length === 1 ? this.optionList[0].value : ''\r\n    }\r\n\r\n    checkSelected = () => {\r\n        if (this.state.isLoading || this.props.disabled) return\r\n        if (this.optionList.filter((item) => item.value === this.state.value).length === 0) this.setState({value: this.defaultSelectedValue()})\r\n    }\r\n    checkFilter = ((prevFilter) => () => {\r\n        const {filter} = this.props\r\n        if (isEqual(prevFilter, filter)) return\r\n        prevFilter = filter\r\n        return this.setState({optionsInvalidate: true})\r\n    })(this.props.filter)\r\n\r\n\r\n    invokeListeners = ((prevState) => () => {\r\n        if (JSON.stringify(this.state) === JSON.stringify(prevState)) return\r\n        let {onChange} = this.props\r\n        if (check.function(onChange)) {\r\n            onChange = [onChange]\r\n        }\r\n        if (check.not.array(onChange)) return\r\n        prevState = cloneDeep(this.state)\r\n        for (const subscriber of onChange) {\r\n            subscriber(prevState)\r\n        }\r\n    })([])\r\n\r\n    async updateIfNeeded() {\r\n\r\n        const {isAsync, disabled} = this.props\r\n        const {isLoading, optionsInvalidate} = this.state\r\n\r\n        if (isLoading || disabled) return\r\n        this.checkFilter()\r\n        if (!optionsInvalidate) return\r\n        if (isAsync) {\r\n            this.setState({isLoading: true})\r\n            this.optionList = await this.updateRemoteOptionList()\r\n        } else {\r\n            this.optionList = this.updateLocalOptionList()\r\n        }\r\n        this.setState({isLoading: false, optionsInvalidate: false})\r\n    }\r\n\r\n    async updateRemoteOptionList() {\r\n        const {remoteDataFetch = this.remoteDataFetchDefault} = this.props\r\n        try {\r\n            const data = await remoteDataFetch(this.props.filter)\r\n            return check.array(data) ? data : []\r\n        } catch (error) {\r\n            console.log('error in Select: ', error)\r\n        }\r\n\r\n\r\n    }\r\n    updateLocalOptionList() {\r\n        return this.props.optionList\r\n    }\r\n\r\n    async remoteDataFetchDefault() {\r\n        const {remoteSourceUrl, filter=[]} = this.props\r\n        try {\r\n            const {data} = await axios.post(remoteSourceUrl, filter)\r\n            return check.array(data) ? data : []\r\n        } catch (error) {\r\n            console.log('error: ', error)\r\n        }\r\n    }\r\n\r\n    buildOptionList = () => {\r\n        const {isLoading} = this.state\r\n        if (isLoading) return <option value={null}>Loading...</option>\r\n\r\n        const emptyOption = <option value={this.props.emptyValue} key='empty'>{this.props.emptyLabel}</option>\r\n        const optionsSet = this.optionList.map(\r\n            ({value, label}, key) => {\r\n                return <option value={value} key={key}>{label}</option>\r\n            })\r\n        if (this.optionList.length === 1) {\r\n            return optionsSet\r\n        } else {\r\n            return this.props.emptyOption ? [emptyOption, ...optionsSet] : optionsSet\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const clearMargin = this.props.clearMargin ? css.formGroupZeroMargin : undefined\r\n        const {value} = this.state\r\n        const controlLabel = check.string(this.props.label) ? <ControlLabel>{this.props.label}</ControlLabel> : null\r\n        return (\r\n            <Fragment>\r\n                <FormGroup controlId={this.props.controlId} style={this.props.style} bsClass={clearMargin}>\r\n                    {controlLabel}\r\n                    <FormControl\r\n                        onChange={this.handleChange}\r\n                        componentClass=\"select\"\r\n                        placeholder=\"select item\"\r\n                        value={value}\r\n                        disabled={this.props.disabled}\r\n                        className={this.props.smallSize ? css.size : undefined}\r\n                    >\r\n                        {this.buildOptionList()}\r\n                    </FormControl>\r\n                </FormGroup>\r\n            </Fragment>\r\n        );\r\n    }\r\n    async componentDidMount() {\r\n        await this.updateIfNeeded()\r\n        this.setDefaultSelected(this.props.defaultSelected)\r\n        this.checkSelected()\r\n    }\r\n    async componentDidUpdate() {\r\n        await this.updateIfNeeded()\r\n        this.setDefaultSelected(this.props.defaultSelected)\r\n        this.checkSelected()\r\n        this.invokeListeners()\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * isAsync - if true, will be used  getDataUrl to get options list. optionList parameter will be ignored\r\n * onChange - function or array of functions, that will be invoke on state change\r\n */\r\nSelect.propTypes = {\r\n    controlId: PropTypes.string,\r\n    //local option list if isAsync = false\r\n    optionList: PropTypes.arrayOf(PropTypes.shape(\r\n        {\r\n            value: PropTypes.oneOfType([\r\n                PropTypes.number,\r\n                PropTypes.string\r\n            ]),\r\n            label: PropTypes.string\r\n        }\r\n    )),\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    emptyOption: PropTypes.bool, //add or not empty option into list\r\n    emptyValue: PropTypes.string,\r\n    emptyLabel: PropTypes.string,\r\n    defaultSelected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    isAsync: PropTypes.bool,\r\n    remoteSourceUrl: PropTypes.string,\r\n    remoteDataFetch: PropTypes.func,\r\n    onChange: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.arrayOf(PropTypes.func)\r\n    ]),\r\n    filter: PropTypes.arrayOf(PropTypes.shape({\r\n        accessor: PropTypes.string,\r\n        statement: PropTypes.string,\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])\r\n    })),\r\n    style: PropTypes.object,\r\n    clearMargin: PropTypes.bool,\r\n    smallSize: PropTypes.bool\r\n}\r\nSelect.defaultProps = {\r\n    emptyOption: true,\r\n    optionList: [],\r\n    isAsync: false,\r\n    onChange: [],\r\n    emptyValue: '',\r\n    emptyLabel: '<Не выбрано>',\r\n    filter: [],\r\n    selected: ''\r\n}\r\n\r\nexport default Select\r\n","const DEVELOPED_BASE_URL = 'netcmdb-loc.rs.ru:8082'\r\nconst BASE_URL = (() => {\r\n    const protocol = window.location.protocol\r\n    const hostname = window.location.hostname\r\n    const port = window.location.port\r\n    const developMode = hostname === 'localhost'\r\n    return developMode ? `${protocol}//${DEVELOPED_BASE_URL}` : `${protocol}//${hostname}${port==='' ? '' : ':'}${port}`\r\n})()\r\nexport const NET_DATA_URL = `${BASE_URL}/api/getNetData.json`\r\nexport const VRF_LIST_URL= `${BASE_URL}/api/getVrfList.json`\r\nexport const NET_SUBMIT_URL = `${BASE_URL}/api/saveNetData.json`\r\n\r\nconsole.log(\"BASE API URL\", BASE_URL)","import React, {Fragment, Component} from 'react'\r\nimport check from 'check-types'\r\nimport custCss from './style.module.css'\r\nimport axios from 'axios'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport isEqual from 'lodash/isEqual'\r\nimport {Row, Col, Button, Modal, ModalBody, ModalFooter, ModalHeader, } from 'react-bootstrap'\r\n\r\nimport Input from '../components/Base/Input'\r\nimport Input2 from '../components/Base/Input2'\r\nimport TextArea from '../components/Base/TextArea'\r\nimport TextArea2 from '../components/Base/TextArea2'\r\nimport CheckBox from '../components/Base/CheckBox'\r\nimport Select from '../components/Base/Select'\r\nimport {NET_DATA_URL, VRF_LIST_URL, NET_SUBMIT_URL} from'../constants'\r\n\r\nclass EditNetWindow extends Component {\r\n    /**\r\n      * @typedef {{\r\n      *     vrf_id: number,\r\n      *     vrf_name: string,\r\n      *     vrf_rd: string\r\n      *     vrf_comment: string\r\n      * }} Vrf\r\n      */\r\n\r\n    /**\r\n     * @type {{\r\n     *     show: boolean,\r\n     *     newNet: boolean,\r\n     *     netId: (number|string),\r\n     *     netIp: string,\r\n     *     netComment: string,\r\n     *     dataLoading: boolean,\r\n     *     dataReady: boolean,\r\n     *     saving: boolean,\r\n     *     vrfId: string|number,\r\n     * }} state\r\n     */\r\n    state = {\r\n        show: false,\r\n        newNet: false,\r\n        // netId: 125921,\r\n        netId: '',\r\n        netIp: '',\r\n        netComment: '',\r\n        dataLoading: false,\r\n        dataReady: true,\r\n        saving: false,\r\n        vrfId: '',\r\n        vrfList: []\r\n    }\r\n\r\n    clearState = ((initialState) => () => {\r\n        this.setState(cloneDeep(initialState))\r\n    })(cloneDeep(this.state))\r\n\r\n    initialData = {}\r\n    clearInitialData = ((initialState) => () => {\r\n        this.initialData = cloneDeep(initialState)\r\n    })(cloneDeep(this.initialData))\r\n\r\n    currentState = {}\r\n    clearCurrentState = ((initialState) => () => {\r\n        this.currentState = cloneDeep(initialState)\r\n    })(cloneDeep(this.currentState))\r\n\r\n    vrfList = ((prevVrfData, prevList) => (vrfData) => {\r\n        if (JSON.stringify(prevVrfData) === JSON.stringify(vrfData))  return prevList\r\n        if (check.not.array(vrfData)) return prevList\r\n        prevVrfData = vrfData\r\n        prevList = vrfData.map((vrf) => {\r\n            const {vrf_id, vrf_rd, vrf_name, vrf_comment} = vrf\r\n            return {value: vrf_id, label: vrf_name}\r\n        })\r\n        return prevList\r\n    })([], [])\r\n\r\n    clearFormData = () => {\r\n        this.clearInitialData()\r\n        this.clearCurrentState()\r\n        this.clearState()\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.clearFormData()\r\n    }\r\n    dataValidate = () => {\r\n        const errors = []\r\n        const {netIp, vrfId} = this.state\r\n        if (check.emptyString(netIp)) errors.push('Не указан адрес подсети')\r\n        if (check.emptyString(vrfId)) errors.push('Не выбран VRF')\r\n        return errors\r\n    }\r\n    editedNetData = () => {\r\n        const {newNet, netId, netIp, netComment, vrfId} = this.state\r\n        return {\r\n            newNet,\r\n            netId,\r\n            netIp,\r\n            netComment,\r\n            vrfId\r\n        }\r\n    }\r\n\r\n\r\n    handleSubmit = async() => {\r\n        const errors = this.dataValidate(this.currentState)\r\n        if (check.nonEmptyArray(errors)) {\r\n            alert(errors.join(\"\\n\"))\r\n            return\r\n        }\r\n        try {\r\n            this.setState({saving: true})\r\n            /**\r\n             * @typedef {{\r\n             *     code: number,\r\n             *     message: string\r\n             * }} Error\r\n             * @type {{\r\n             *     errors: Error[]\r\n             * }} res\r\n             */\r\n            const res = await axios.post(NET_SUBMIT_URL, this.editedNetData())\r\n            const {data} = res\r\n            if (data.errors) throw data.errors.join(\"\\n\")\r\n            this.setState({saving: false})\r\n            console.log('SAVE RESULT', data.result)\r\n            if (window.updateNetTable) {\r\n                window.updateNetTable()\r\n            } else {\r\n                console.log('function updateDevTable not found')\r\n            }\r\n            setTimeout(() => {this.handleClose()}, 700)\r\n        } catch (e) {\r\n            console.log('ERROR: ', e)\r\n            alert(e)\r\n            this.setState({saving: false})\r\n        }\r\n    }\r\n\r\n    fetchNetData = async (netId) => {\r\n        try {\r\n\r\n            const res = await axios.get(NET_DATA_URL, {\r\n                params: {netId}\r\n            })\r\n            const {data} = res\r\n            if (!data.netData) {\r\n                console.log('ERROR: fetchNetworkData')\r\n                return {}\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: fetchNetworkData', e.toString())\r\n            return {}\r\n        }\r\n    }\r\n    fetchVrfList = async () => {\r\n        try {\r\n            const res = await axios.get(VRF_LIST_URL, {\r\n                params: {}\r\n            })\r\n            const {data} = res\r\n            if (!data.vrfList) {\r\n                console.log('ERROR: fetchVrfList')\r\n                return []\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            console.log('ERROR: fetchVrfList', e.toString())\r\n            return []\r\n        }\r\n    }\r\n    ipFormat = (value) => {\r\n        const reg = new RegExp('^[0-9./]*$')\r\n        return reg.test(value)\r\n    }\r\n    onChangeNetIp = (e) => {\r\n        if (!(this.ipFormat(e.target.value))) return\r\n        this.setState({netIp: e.target.value})\r\n    }\r\n    onChangeNetComment = (e) => {\r\n        this.setState({netComment: e.target.value})\r\n    }\r\n    onChangeVrf = ({value}) => {\r\n        console.log('data', value)\r\n        this.setState({vrfId: value})\r\n    }\r\n\r\n    render() {\r\n        const {dataReady} = this.state\r\n        const modalBody = () => {\r\n            if (!this.state.show) return null\r\n            if (!this.state.dataReady) return <h3 align=\"center\">Загрузка данных...</h3>\r\n            return (\r\n                <Fragment>\r\n                    <Row>\r\n                        <Col md={4}><Input2 controlId='networkIp' addOnPosition=\"left\" addOnText=\"network IP\" onChange={this.onChangeNetIp} label=\"Адрес подсети\" value={this.state.netIp} placeholder='CIDR notation'/></Col>\r\n                        <Col md={8}><Input2 controlId='netComment' label=\"Комментарий\" onChange={this.onChangeNetComment} value={this.state.netComment} placeholder='Комментарий для подсети'/></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={4}><Select label=\"VRF\" optionList={this.state.vrfList} defaultSelected={this.state.vrfId} onChange={this.onChangeVrf} /></Col>\r\n                    </Row>\r\n                </Fragment>\r\n            )\r\n        }\r\n        const modalTitle = () => this.state.newNet ? 'Новая подсеть' : 'Редактирование подсети'\r\n        return (\r\n            <Modal show={this.state.show} onHide={this.handleClose} bsSize=\"large\" >\r\n                <ModalHeader closeButton>\r\n                    <Modal.Title>{modalTitle()}</Modal.Title>\r\n                </ModalHeader>\r\n                <ModalBody className={custCss.modalBody} >\r\n                    {modalBody()}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Row>\r\n                        <Col md={8}>\r\n                            <h3 align=\"center\" style={{margin: 0}}>{this.state.saving ? 'Сохранение данных...' : ''}</h3>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Button onClick={this.handleClose} bsStyle=\"danger\" disabled={this.state.saving} >Отмена</Button>\r\n                            <Button onClick={this.handleSubmit} bsStyle=\"success\" disabled={this.state.saving}>Сохранить</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n    async componentDidMount() {\r\n        window.openNetworkEditModal = (netId, vrfId) => {\r\n            this.setState({\r\n                show: true,\r\n                netId: netId,\r\n                vrfId: vrfId,\r\n                newNet: false,\r\n                dataReady: false\r\n            })\r\n        }\r\n        window.openNewNetworkModal = () => {\r\n            this.setState({\r\n                show: true,\r\n                netId: '',\r\n                newNet: true,\r\n                dataReady: false\r\n            })\r\n        }\r\n        window.updateNetTable = () => window.location.reload()\r\n\r\n        this.setState({dataReady: false})\r\n    }\r\n\r\n    async componentDidUpdate() {\r\n        const {netId, newNet, dataReady, dataLoading} = this.state\r\n        if (! newNet && netId && !dataReady && !dataLoading) {\r\n            this.setState({dataLoading: true})\r\n            try {\r\n                const response1 = await Promise.all([\r\n                    this.fetchNetData(netId),\r\n                    this.fetchVrfList(),\r\n                ])\r\n                console.log(response1)\r\n                const [{netData}, {vrfList: vrfRawData}] = response1\r\n                const {net_ip: netIp, net_comment: netComment, vrf_id: vrfId} = netData\r\n                const vrfList = this.vrfList(vrfRawData)\r\n                console.log('NET VRF', vrfList)\r\n                this.setState({dataLoading: false, dataReady: true, netIp, netComment, vrfId, vrfList})\r\n            } catch (e) {\r\n                console.log('Loading net data ERROR', e.toString())\r\n            }\r\n\r\n        } else if (newNet && !dataReady && !dataLoading) {\r\n            this.setState({dataLoading: true})\r\n            const response1 = await this.fetchVrfList()\r\n            const {vrfList: vrfRawData} = response1\r\n            const vrfList = this.vrfList(vrfRawData)\r\n            console.log('NET VRF', vrfList)\r\n            this.setState({dataLoading: false, dataReady: true, vrfList})\r\n        }\r\n    }\r\n}\r\n\r\nexport default EditNetWindow\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport EditNetWindow from './EditNetWindow';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<EditNetWindow />, document.getElementById('reactEditNetModal'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroupZeroMargin\":\"style_formGroupZeroMargin__2F9Vc\",\"indents\":\"style_indents__2m_Rb\",\"size\":\"style_size__1kAhA style_indents__2m_Rb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroupZeroMargin\":\"style_formGroupZeroMargin__3crXQ\",\"indents\":\"style_indents__EyzCB\",\"size\":\"style_size__foxdr style_indents__EyzCB\"};"],"sourceRoot":""}